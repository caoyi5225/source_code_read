{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/justified-gallery/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/justified-gallery/justifiedGallery.min.css","path":"lib/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/meslo-LG/styles.css","path":"lib/meslo-LG/styles.css","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-light/source/images/theme overview.psd","path":"images/theme overview.psd","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1548909778407},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1548909778408},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1548909778408},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1548909778408},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1548909778409},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1548909778423},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1548909778407},{"_id":"source/_posts/react-redux.md","hash":"a8c6486f9247a7caa73036d9b5a65edc81416153","modified":1548911870378},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1548909778409},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1548909778409},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1548909778409},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1548909778410},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1548909778410},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1548909778411},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1548909778411},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1548909778411},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1548909778411},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1548909778412},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1548909778412},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1548909778412},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1548909778420},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1548909778421},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1548909778421},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1548909778421},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1548909778422},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1548909778422},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1548909778422},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1548909778423},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1548909778413},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1548909778414},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1548909778413},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1548909778414},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1548909778414},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1548909778415},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1548909778415},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1548909778415},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1548909778415},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1548909778416},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1548909778418},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1548909778418},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1548909778419},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1548909778419},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1548909778420},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1548909778420},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1548909778428},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1548909778424},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1548909778435},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1548909778435},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1548909778435},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1548909778436},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1548909778436},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1548909778436},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1548909778437},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1548909778439},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1548909778440},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1548909778440},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1548909778441},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1548909778416},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1548909778416},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1548909778417},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1548909778417},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1548909778417},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1548909778418},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1548909778424},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1548909778424},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1548909778425},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1548909778425},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1548909778425},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1548909778426},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1548909778426},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1548909778426},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1548909778427},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1548909778427},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1548909778427},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1548909778428},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1548909778430},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1548909778429},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1548909778432},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1548909778437},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1548909778437},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1548909778438},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1548909778438},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1548909778439},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1548909778439},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1548909778432},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1548909778431},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1548909778434},{"_id":"public/2019/01/31/hello-world/index.html","hash":"f631f0206aeb251ad333201bc4d272db86630fc6","modified":1548909807481},{"_id":"public/archives/2019/index.html","hash":"b57d5360fcb1d895bc1a621d3517e357a5d80f23","modified":1548910926087},{"_id":"public/archives/index.html","hash":"84889150e7cd549efeb0fe21ede8d24b5ae84abf","modified":1548912393401},{"_id":"public/archives/2019/01/index.html","hash":"322ab3c79d878baf2ca2a705dade037b4d8e89f5","modified":1548910926087},{"_id":"public/index.html","hash":"a88b923f7f4e89b4922746936bbff536553c0035","modified":1548912393401},{"_id":"public/2019/01/31/react-redux/index.html","hash":"ade3f209fbde25dc99f3add466b0ae66d56be76e","modified":1548910837733},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1548909807526},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1548909807527},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1548909807527},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1548909807527},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1548909807527},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1548909807527},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1548909807527},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1548909807527},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1548909807527},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1548909807527},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1548909808029},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1548909808037},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1548909808040},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1548909808040},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1548909808041},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1548909808041},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1548909808041},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1548909808041},{"_id":"public/css/style.css","hash":"7e8363a9215524c2b560ffef69b228d4d6e929b3","modified":1548910838107},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1548909808041},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1548909808041},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1548909808044},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1548909808044},{"_id":"themes/cactus-light/_config.yml","hash":"1c39837377628566b2a24f4430ea4c6148930027","modified":1548911304658},{"_id":"themes/cactus-light/LICENSE","hash":"2f1530f30fbec68407daa54391553c3d5ff71f6a","modified":1548910698812},{"_id":"themes/cactus-light/README.md","hash":"da60bf6d6f800de621ea3a2600f4a850ddaff7d2","modified":1548910698813},{"_id":"themes/cactus-light/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1548910698806},{"_id":"themes/cactus-light/.git/config","hash":"43e690af2f2e5a8a9f223f7b1367a0b447eb3d82","modified":1548910698807},{"_id":"themes/cactus-light/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1548910693890},{"_id":"themes/cactus-light/.git/index","hash":"dd10fa16305bf68fddfcbd32aa607d9a8ff0009e","modified":1548910698919},{"_id":"themes/cactus-light/.git/packed-refs","hash":"a6dd5b03e0c13441587fa442ae72c87cdabb708b","modified":1548910698803},{"_id":"themes/cactus-light/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1548910698816},{"_id":"themes/cactus-light/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1548910698816},{"_id":"themes/cactus-light/layout/index.ejs","hash":"53196279a25035da55902f4b8f0ebdf7871d39d1","modified":1548910698815},{"_id":"themes/cactus-light/layout/archive.ejs","hash":"ab9798bf534485a4fed4d3089011421858afdd26","modified":1548910698815},{"_id":"themes/cactus-light/layout/page.ejs","hash":"b6b7b1e6dc856a0e62f35da0151f67ba41143e04","modified":1548910698816},{"_id":"themes/cactus-light/layout/layout.ejs","hash":"8484532ad7c4da22f46fc1394bb2fd9ded34be1f","modified":1548910698815},{"_id":"themes/cactus-light/layout/post.ejs","hash":"2731e597b5d1714a6f5a775c432e99785f02a3e3","modified":1548910698816},{"_id":"themes/cactus-light/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1548910693892},{"_id":"themes/cactus-light/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1548910693891},{"_id":"themes/cactus-light/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1548910693894},{"_id":"themes/cactus-light/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1548910693894},{"_id":"themes/cactus-light/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1548910693894},{"_id":"themes/cactus-light/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1548910693892},{"_id":"themes/cactus-light/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1548910693895},{"_id":"themes/cactus-light/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1548910693891},{"_id":"themes/cactus-light/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1548910693893},{"_id":"themes/cactus-light/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1548910693893},{"_id":"themes/cactus-light/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1548910693890},{"_id":"themes/cactus-light/.git/logs/HEAD","hash":"d440761bd1e5bb608f185165a422e28cd014adc8","modified":1548910698807},{"_id":"themes/cactus-light/source/css/_extend.styl","hash":"faca25132d55e8989d1c1d638e55d1e97de3c561","modified":1548910698816},{"_id":"themes/cactus-light/source/css/_mixins.styl","hash":"c921ceb620deedddd38c9cec28190995e8764bab","modified":1548910698825},{"_id":"themes/cactus-light/source/css/_util.styl","hash":"f8e286a21c7ec3e771d5ddeb2909ac92390af9bd","modified":1548910698828},{"_id":"themes/cactus-light/source/css/_variables.styl","hash":"35d671e97f68b258aeb7f19d101a0850c6c20f62","modified":1548910698829},{"_id":"themes/cactus-light/source/css/style.styl","hash":"ada8a252ea063c5b7ec9e7848e993001ccc0631c","modified":1548910698829},{"_id":"themes/cactus-light/source/js/main.js","hash":"2703a7cb4fc7056d13215b9fde675da426b9cdc4","modified":1548910698869},{"_id":"themes/cactus-light/layout/_partial/comments.ejs","hash":"853a4500da515ef3facc51a055886eaf8efd080d","modified":1548910698813},{"_id":"themes/cactus-light/layout/_partial/head.ejs","hash":"7782e6b1ce72fcf121f0017d383e2fb87e72c539","modified":1548910698814},{"_id":"themes/cactus-light/layout/_partial/footer.ejs","hash":"7f6b3f126a58e6734b658ab57bc6b41822bc9342","modified":1548910698813},{"_id":"themes/cactus-light/layout/_partial/header.ejs","hash":"889fe54bbfd1fb3357e8c0614d57a437a72f782a","modified":1548910698814},{"_id":"themes/cactus-light/layout/_partial/pagination.ejs","hash":"ca660c59aec56daa4a7b41715b97434d4a24c37e","modified":1548910698814},{"_id":"themes/cactus-light/layout/_partial/scripts.ejs","hash":"6cffa3adb2f5b93a47f29549ac589c8bce8c223e","modified":1548910698815},{"_id":"themes/cactus-light/layout/_partial/styles.ejs","hash":"e62b799d8ac369d1f1b36bd2649ecc34aec3384c","modified":1548910698815},{"_id":"themes/cactus-light/source/images/apple-touch-icon.png","hash":"119559ffcb71bed428e88e28401a29aebfed674a","modified":1548910698829},{"_id":"themes/cactus-light/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1548910698830},{"_id":"themes/cactus-light/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1548910698830},{"_id":"themes/cactus-light/source/images/logo.png","hash":"a25db3e5edb7be2182f4bcae98afb0dd7d6e5353","modified":1548910698831},{"_id":"themes/cactus-light/.git/refs/heads/master","hash":"f4a8e1805fb409065cfa7ac83f663e0526f5f727","modified":1548910698806},{"_id":"themes/cactus-light/.git/objects/pack/pack-c401fbf4fa47952c7f2f0667b1af0e11825036e2.idx","hash":"6c06bdc4657fe568ac07d46bc85ffffec0732a91","modified":1548910698792},{"_id":"themes/cactus-light/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1548910698817},{"_id":"themes/cactus-light/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1548910698817},{"_id":"themes/cactus-light/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1548910698817},{"_id":"themes/cactus-light/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1548910698817},{"_id":"themes/cactus-light/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1548910698818},{"_id":"themes/cactus-light/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1548910698818},{"_id":"themes/cactus-light/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1548910698818},{"_id":"themes/cactus-light/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1548910698818},{"_id":"themes/cactus-light/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1548910698818},{"_id":"themes/cactus-light/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1548910698818},{"_id":"themes/cactus-light/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1548910698819},{"_id":"themes/cactus-light/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1548910698819},{"_id":"themes/cactus-light/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1548910698819},{"_id":"themes/cactus-light/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1548910698819},{"_id":"themes/cactus-light/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1548910698819},{"_id":"themes/cactus-light/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1548910698819},{"_id":"themes/cactus-light/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1548910698819},{"_id":"themes/cactus-light/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1548910698820},{"_id":"themes/cactus-light/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1548910698820},{"_id":"themes/cactus-light/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1548910698820},{"_id":"themes/cactus-light/source/css/_highlight/monokai.styl","hash":"bd4b20bdbb3a62972f5c9e52f1f794090b8ff7f9","modified":1548910698821},{"_id":"themes/cactus-light/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1548910698820},{"_id":"themes/cactus-light/source/css/_highlight/kimbie.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1548910698820},{"_id":"themes/cactus-light/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1548910698821},{"_id":"themes/cactus-light/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1548910698822},{"_id":"themes/cactus-light/source/css/_highlight/paraiso.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1548910698822},{"_id":"themes/cactus-light/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1548910698822},{"_id":"themes/cactus-light/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1548910698822},{"_id":"themes/cactus-light/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1548910698824},{"_id":"themes/cactus-light/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1548910698823},{"_id":"themes/cactus-light/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1548910698824},{"_id":"themes/cactus-light/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1548910698823},{"_id":"themes/cactus-light/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1548910698824},{"_id":"themes/cactus-light/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1548910698824},{"_id":"themes/cactus-light/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1548910698824},{"_id":"themes/cactus-light/source/css/_partial/archive.styl","hash":"18fa7f84a9783c5fb56c9f450ea93bd88408e682","modified":1548910698825},{"_id":"themes/cactus-light/source/css/_partial/article.styl","hash":"b90c7eebe9b39110aac089d65155e937dc1836e9","modified":1548910698825},{"_id":"themes/cactus-light/source/css/_partial/comments.styl","hash":"11fb41241a13971d23fc3f7e6d60315c7f248396","modified":1548910698826},{"_id":"themes/cactus-light/source/css/_partial/footer.styl","hash":"b7570de60eaf9aa6b0192bf9c71b9172ff11bfbc","modified":1548910698827},{"_id":"themes/cactus-light/source/css/_partial/header.styl","hash":"63707d9103a283147ca222fd6f8ff9bffbffe427","modified":1548910698827},{"_id":"themes/cactus-light/source/css/_partial/index.styl","hash":"cf43702450ea1e5617541501886982a394cff8ec","modified":1548910698827},{"_id":"themes/cactus-light/source/css/_partial/pagination.styl","hash":"f483e0b4e8aefaa81f5e1e5e8ab7c54f70557f75","modified":1548910698828},{"_id":"themes/cactus-light/source/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1548910698882},{"_id":"themes/cactus-light/source/lib/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1548910698882},{"_id":"themes/cactus-light/source/lib/meslo-LG/styles.css","hash":"eb88d0b9f1bbef99070e9627e2c96d892036bf7e","modified":1548910698918},{"_id":"themes/cactus-light/layout/_partial/post/actions_desktop.ejs","hash":"2319dea76f205c27dd59c994921f66350df8027a","modified":1548910698814},{"_id":"themes/cactus-light/layout/_partial/post/actions_mobile.ejs","hash":"e7638a83e5aaa4bf5b24440ca76fec8eb563bed7","modified":1548910698814},{"_id":"themes/cactus-light/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1548910698814},{"_id":"themes/cactus-light/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1548910698814},{"_id":"themes/cactus-light/layout/_partial/post/share.ejs","hash":"25a3406f97e976ec13239f0d3f32f9e512511f50","modified":1548910698814},{"_id":"themes/cactus-light/layout/_partial/post/tag.ejs","hash":"bfab03ef986d35ccad583f2d2b575db4a8d2789e","modified":1548910698815},{"_id":"themes/cactus-light/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1548910698815},{"_id":"themes/cactus-light/source/lib/jquery/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1548910698881},{"_id":"themes/cactus-light/.git/logs/refs/heads/master","hash":"d440761bd1e5bb608f185165a422e28cd014adc8","modified":1548910698807},{"_id":"themes/cactus-light/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1548910698806},{"_id":"themes/cactus-light/source/css/_partial/post/actions_desktop.styl","hash":"e05dbc1022cfe14828dad8499c7a8a6b93f71598","modified":1548910698828},{"_id":"themes/cactus-light/source/css/_partial/post/actions_mobile.styl","hash":"dce6466e2ab708854c9e15173bfc19e5715d4303","modified":1548910698828},{"_id":"themes/cactus-light/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1548910698870},{"_id":"themes/cactus-light/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1548910698870},{"_id":"themes/cactus-light/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548910698880},{"_id":"themes/cactus-light/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548910698880},{"_id":"themes/cactus-light/.git/logs/refs/remotes/origin/HEAD","hash":"d440761bd1e5bb608f185165a422e28cd014adc8","modified":1548910698805},{"_id":"themes/cactus-light/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1548910698872},{"_id":"themes/cactus-light/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548910698874},{"_id":"themes/cactus-light/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1548910698879},{"_id":"themes/cactus-light/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1548910698878},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1548910698896},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1548910698910},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1548910698916},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1548910698892},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1548910698887},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1548910698900},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1548910698902},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1548910698906},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1548910698912},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1548910698914},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1548910698915},{"_id":"themes/cactus-light/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1548910698918},{"_id":"themes/cactus-light/source/images/theme overview.psd","hash":"8dc11d9d289c247423911e962c4eb3a556dc67d1","modified":1548910698869},{"_id":"themes/cactus-light/.git/objects/pack/pack-c401fbf4fa47952c7f2f0667b1af0e11825036e2.pack","hash":"74914d968e90d15516ff702264960a9612f2d048","modified":1548910698791},{"_id":"public/images/apple-touch-icon.png","hash":"119559ffcb71bed428e88e28401a29aebfed674a","modified":1548910837747},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1548910837747},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1548910837747},{"_id":"public/images/logo.png","hash":"a25db3e5edb7be2182f4bcae98afb0dd7d6e5353","modified":1548910837747},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548910838101},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548910838102},{"_id":"public/js/main.js","hash":"2703a7cb4fc7056d13215b9fde675da426b9cdc4","modified":1548910838107},{"_id":"public/lib/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1548910838107},{"_id":"public/lib/meslo-LG/styles.css","hash":"eb88d0b9f1bbef99070e9627e2c96d892036bf7e","modified":1548910838107},{"_id":"public/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1548910838107},{"_id":"public/lib/jquery/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1548910838107},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1548910838107},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1548910838107},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548910838107},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1548910838107},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1548910838107},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1548910838119},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1548910838123},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1548910838123},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1548910838123},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1548910838126},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1548910838126},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1548910838126},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1548910838126},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1548910838126},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1548910838127},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1548910838128},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1548910838129},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1548910838129},{"_id":"public/images/theme overview.psd","hash":"8dc11d9d289c247423911e962c4eb3a556dc67d1","modified":1548910838151},{"_id":"source/_posts/redux.md","hash":"ad7f248786e22333522461b201bbe363244920e3","modified":1548911790449},{"_id":"public/archives/2018/index.html","hash":"9c88851058702e3f3bcc229a183612e48a05a69f","modified":1548912393401},{"_id":"public/archives/2018/11/index.html","hash":"1addd15bc50d6fef1e2bffbe2f1757e91c73ff11","modified":1548912393401},{"_id":"public/2018/11/30/redux/index.html","hash":"ee4bc9a74b454d83ed95f535856a358d9d0a47a8","modified":1548912393401},{"_id":"public/2018/11/27/react-redux/index.html","hash":"a029c1389be64f117ac62f2b1deafdd28d7a4e90","modified":1548912393401}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"react-redux 源码解析","date":"2018-11-27T04:40:10.000Z","_content":"\n## api\n\n``` javascript\nexport { Provider, createProvider, connectAdvanced, connect }\n```\n\n从 index.js 可以知道, react-redux对外暴露了4个api,接下来我们去看每个api的实现\n\n## Provider\n\n```javascript\nclass Provider extends Component {\n  // Provider作为顶层组件,通过context向下分发store\n  // 之后Connect组件可以获取store\n  getChildContext() {\n    return { [storeKey]: this[storeKey], [subscriptionKey]: null }\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this[storeKey] = props.store;\n  }\n\n  render() {\n    // 返回children里仅有的子级。否则抛出异常\n    // Provider必须有且仅有一个子组件\n    return Children.only(this.props.children)\n  }\n}\n\nProvider.propTypes = {\n  store: storeShape.isRequired,\n  children: PropTypes.element.isRequired,\n}\n\nProvider.childContextTypes = {\n  [storeKey]: storeShape.isRequired,\n  [subscriptionKey]: subscriptionShape,\n}\n\n// store的格式\nexport const storeShape = PropTypes.shape({\n  subscribe: PropTypes.func.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  getState: PropTypes.func.isRequired\n})\n\n// subscription的格式\nexport const subscriptionShape = PropTypes.shape({\n  trySubscribe: PropTypes.func.isRequired,\n  tryUnsubscribe: PropTypes.func.isRequired,\n  notifyNestedSubs: PropTypes.func.isRequired,\n  isSubscribed: PropTypes.func.isRequired,\n})\n\n```\n这里我们可以看到,Provider组件的作用就是作为根组件,向整个react树通过context分发store\n\n## createProvider\n\n```javascript\nexport function createProvider(storeKey = 'store') {\n  // createProvider为自定义storeKey的Provider提供了创建接口\n  const subscriptionKey = `${storeKey}Subscription`\n  // ...\n  return Provider;\n}\n```\n\n## connectAdvance\n\n因为connectAdvance的返回值是一个HOC(高阶组件),所以不熟悉HOC的话可以移步[HOC](https://react.docschina.org/docs/higher-order-components.html)\n```javascript\n\nexport default function connectAdvanced(\n\n  /**\n   * selectFactory 负责从state,props,dispath计算新的props\n   * 定义方式如下:\n   * options是传递给connectAdvance的第二个参数和WrappedComponent的组合\n   * export default connectAdvanced((dispatch, options) => (state, props) => ({\n   *   thing: state.things[props.thingId],\n   *   saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),\n   * }))(YourComponent)\n   */\n  selectorFactory,\n  {\n  \n    // 用来组织HOC的名字\n    getDisplayName = name => `ConnectAdvanced(${name})`,\n\n    // 错误提示时展示用的名字\n    methodName = 'connectAdvanced',\n\n    // 如果已定义,则指定对应的子组件的render次数\n    // 用于在react-devtools观察不必要的render\n    renderCountProp = undefined,\n\n    // 表明HOC是否订阅state改变\n    shouldHandleStateChanges = true,\n\n    // 从contextprops中获取store的key\n    storeKey = 'store',\n\n    // 是否需要ref,详见HOC介绍\n    withRef = false,\n\n    // 其余的配置\n    ...connectOptions\n  } = {}\n) {\n  const subscriptionKey = storeKey + 'Subscription'\n  // 热加载版本\n  const version = hotReloadingVersion++\n\n  const contextTypes = {\n    [storeKey]: storeShape,\n    [subscriptionKey]: subscriptionShape,\n  }\n  const childContextTypes = {\n    [subscriptionKey]: subscriptionShape,\n  }\n\n  return function wrapWithConnect(WrappedComponent) {\n    // 如果不是生产环境,检测被HOC包裹的对象是否为合法的组件\n    if (process.env.NODE_ENV !== 'production') {\n      invariant(\n        isValidElementType(WrappedComponent),\n        `You must pass a component to the function returned by ` +\n        `${methodName}. Instead received ${JSON.stringify(WrappedComponent)}`\n      );\n    }\n\n    const wrappedComponentName = WrappedComponent.displayName\n      || WrappedComponent.name\n      || 'Component'\n\n    const displayName = getDisplayName(wrappedComponentName)\n\n    // 要传给selectorFactory的参数\n    const selectorFactoryOptions = {\n      // 用户要传入的参数\n      ...connectOptions,\n      getDisplayName,\n      methodName,\n      renderCountProp,\n      shouldHandleStateChanges,\n      storeKey,\n      withRef,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent\n    }\n    class Connect extends Component {\n      constructor(props, context) {\n        super(props, context)\n\n        this.version = version\n        this.state = {}\n        this.renderCount = 0\n        this.store = props[storeKey] || context[storeKey]\n        // 从props是否传入了store\n        this.propsMode = Boolean(props[storeKey])\n        // for ref\n        this.setWrappedInstance = this.setWrappedInstance.bind(this)\n\n        invariant(this.store,\n          `Could not find \"${storeKey}\" in either the context or props of ` +\n          `\"${displayName}\". Either wrap the root component in a <Provider>, ` +\n          `or explicitly pass \"${storeKey}\" as a prop to \"${displayName}\".`\n        )\n\n        this.initSelector()\n        this.initSubscription()\n      }\n\n      getChildContext() {\n        const subscription = this.propsMode ? null : this.subscription\n        return { [subscriptionKey]: subscription || this.context[subscriptionKey] }\n      }\n\n      componentDidMount() {\n        if (!shouldHandleStateChanges) return\n        this.subscription.trySubscribe()\n        this.selector.run(this.props)\n        if (this.selector.shouldComponentUpdate) this.forceUpdate()\n      }\n\n      componentWillReceiveProps(nextProps) {\n        this.selector.run(nextProps)\n      }\n\n      shouldComponentUpdate() {\n        return this.selector.shouldComponentUpdate\n      }\n\n      componentWillUnmount() {\n        if (this.subscription) this.subscription.tryUnsubscribe()\n        this.subscription = null\n        this.notifyNestedSubs = noop\n        this.store = null\n        this.selector.run = noop\n        this.selector.shouldComponentUpdate = false\n      }\n\n      getWrappedInstance() {\n        invariant(withRef,\n          `To access the wrapped instance, you need to specify ` +\n          `{ withRef: true } in the options argument of the ${methodName}() call.`\n        )\n        return this.wrappedInstance\n      }\n\n      setWrappedInstance(ref) {\n        this.wrappedInstance = ref\n      }\n\n      initSelector() {\n        // 为selectorFactory注入dispatch\n        const sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions)\n        // 为selector注入state,并通过mapstate计算nextProps来标记是否需要更新组件\n        // props和nextProps存储在selector中,在两次run时用来比较\n        this.selector = makeSelectorStateful(sourceSelector, this.store)\n        this.selector.run(this.props)\n      }\n\n      initSubscription() {\n        // 不监听直接返回\n        if (!shouldHandleStateChanges) return\n        // 如果是props传来的store则从props订阅,如果不是则从context订阅\n        const parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey]\n        // 为当前组件创建一个新的订阅\n        this.subscription = new Subscription(this.store, parentSub, this.onStateChange.bind(this))\n        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription)\n      }\n\n      // state改变的回调\n      onStateChange() {\n        // 比较props, 看是否需要更新组件\n        this.selector.run(this.props)\n\n        // 如果props没变,不需要更新组件,则通知下边的组件store改变,检测是否需要更新\n        // 如果触发了更新,则通过setState强制更新,通过didupdate延后通知子组件检查更新\n        // !!!在本组件update之后,子组件实际已经update,所以在didupdate后通知子组件检查更新\n        // 并不会造成再次渲染子组件,不需要担心嵌套connect的性能问题\n        if (!this.selector.shouldComponentUpdate) {\n          this.notifyNestedSubs()\n        } else {\n          // 在didupdate延后通知子组件检查更新\n          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate\n          this.setState(dummyState)\n        }\n      }\n\n      notifyNestedSubsOnComponentDidUpdate() {\n        this.componentDidUpdate = undefined\n        this.notifyNestedSubs()\n      }\n\n      isSubscribed() {\n        return Boolean(this.subscription) && this.subscription.isSubscribed()\n      }\n\n      addExtraProps(props) {\n        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props\n        const withExtras = { ...props }\n        if (withRef) withExtras.ref = this.setWrappedInstance\n        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++\n        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription\n        return withExtras\n      }\n\n      render() {\n        const selector = this.selector\n        selector.shouldComponentUpdate = false\n\n        if (selector.error) {\n          throw selector.error\n        } else {\n          return createElement(WrappedComponent, this.addExtraProps(selector.props))\n        }\n      }\n    }\n\n    Connect.WrappedComponent = WrappedComponent\n    Connect.displayName = displayName\n    Connect.childContextTypes = childContextTypes\n    Connect.contextTypes = contextTypes\n    Connect.propTypes = contextTypes\n\n    if (process.env.NODE_ENV !== 'production') {\n      Connect.prototype.componentWillUpdate = function componentWillUpdate() {\n        // 处理热加载\n        // 如果版本号改变则说明出发了热加载\n        // 更新版本号\n        // 重新初始化订阅,并解除订阅后重新订阅原有订阅\n        if (this.version !== version) {\n          this.version = version\n          this.initSelector()\n          let oldListeners = [];\n\n          if (this.subscription) {\n            oldListeners = this.subscription.listeners.get()\n            this.subscription.tryUnsubscribe()\n          }\n          this.initSubscription()\n          if (shouldHandleStateChanges) {\n            this.subscription.trySubscribe()\n            oldListeners.forEach(listener => this.subscription.listeners.subscribe(listener))\n          }\n        }\n      }\n    }\n\n    return hoistStatics(Connect, WrappedComponent)\n  }\n}\n```\n\n## Subscription\n订阅的实现是整个框架实现的核心部分之一, 它让每个Container管理自己的一个订阅状态, 并通过将子树叶的订阅集中在父树叶处理,来确保每次state更新造成的dom更新是自上而下的,保证了子树叶不会重复更新\n```javascript\n// encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\n\nconst CLEARED = null\nconst nullListeners = { notify() {} }\n\nfunction createListenerCollection() {\n  // the current/next pattern is copied from redux's createStore code.\n  // TODO: refactor+expose that code to be reusable here?\n  let current = []\n  let next = []\n\n  return {\n    clear() {\n      next = CLEARED\n      current = CLEARED\n    },\n\n    notify() {\n      const listeners = current = next\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i]()\n      }\n    },\n\n    get() {\n      return next\n    },\n\n    subscribe(listener) {\n      let isSubscribed = true\n      if (next === current) next = current.slice()\n      next.push(listener)\n\n      return function unsubscribe() {\n        if (!isSubscribed || current === CLEARED) return\n        isSubscribed = false\n\n        if (next === current) next = current.slice()\n        next.splice(next.indexOf(listener), 1)\n      }\n    }\n  }\n}\n\nexport default class Subscription {\n  constructor(store, parentSub, onStateChange) {\n    this.store = store\n    this.parentSub = parentSub\n    this.onStateChange = onStateChange\n    this.unsubscribe = null\n    this.listeners = nullListeners\n  }\n\n  addNestedSub(listener) {\n    this.trySubscribe()\n    return this.listeners.subscribe(listener)\n  }\n\n  notifyNestedSubs() {\n    this.listeners.notify()\n  }\n\n  isSubscribed() {\n    return Boolean(this.unsubscribe)\n  }\n\n  trySubscribe() {\n    if (!this.unsubscribe) {\n      // !!!划重点!敲黑板!\n      // 没有父级观察者的话，直接监听store change\n      // 有的话，添到父级下面，由父级传递变化\n      this.unsubscribe = this.parentSub\n        ? this.parentSub.addNestedSub(this.onStateChange)\n        : this.store.subscribe(this.onStateChange)\n \n      this.listeners = createListenerCollection()\n    }\n  }\n\n  tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe()\n      this.unsubscribe = null\n      this.listeners.clear()\n      this.listeners = nullListeners\n    }\n  }\n}\n```\n","source":"_posts/react-redux.md","raw":"---\ntitle: react-redux 源码解析\ndate: 2018-11-27 12:40:10\ntags:\n---\n\n## api\n\n``` javascript\nexport { Provider, createProvider, connectAdvanced, connect }\n```\n\n从 index.js 可以知道, react-redux对外暴露了4个api,接下来我们去看每个api的实现\n\n## Provider\n\n```javascript\nclass Provider extends Component {\n  // Provider作为顶层组件,通过context向下分发store\n  // 之后Connect组件可以获取store\n  getChildContext() {\n    return { [storeKey]: this[storeKey], [subscriptionKey]: null }\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this[storeKey] = props.store;\n  }\n\n  render() {\n    // 返回children里仅有的子级。否则抛出异常\n    // Provider必须有且仅有一个子组件\n    return Children.only(this.props.children)\n  }\n}\n\nProvider.propTypes = {\n  store: storeShape.isRequired,\n  children: PropTypes.element.isRequired,\n}\n\nProvider.childContextTypes = {\n  [storeKey]: storeShape.isRequired,\n  [subscriptionKey]: subscriptionShape,\n}\n\n// store的格式\nexport const storeShape = PropTypes.shape({\n  subscribe: PropTypes.func.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  getState: PropTypes.func.isRequired\n})\n\n// subscription的格式\nexport const subscriptionShape = PropTypes.shape({\n  trySubscribe: PropTypes.func.isRequired,\n  tryUnsubscribe: PropTypes.func.isRequired,\n  notifyNestedSubs: PropTypes.func.isRequired,\n  isSubscribed: PropTypes.func.isRequired,\n})\n\n```\n这里我们可以看到,Provider组件的作用就是作为根组件,向整个react树通过context分发store\n\n## createProvider\n\n```javascript\nexport function createProvider(storeKey = 'store') {\n  // createProvider为自定义storeKey的Provider提供了创建接口\n  const subscriptionKey = `${storeKey}Subscription`\n  // ...\n  return Provider;\n}\n```\n\n## connectAdvance\n\n因为connectAdvance的返回值是一个HOC(高阶组件),所以不熟悉HOC的话可以移步[HOC](https://react.docschina.org/docs/higher-order-components.html)\n```javascript\n\nexport default function connectAdvanced(\n\n  /**\n   * selectFactory 负责从state,props,dispath计算新的props\n   * 定义方式如下:\n   * options是传递给connectAdvance的第二个参数和WrappedComponent的组合\n   * export default connectAdvanced((dispatch, options) => (state, props) => ({\n   *   thing: state.things[props.thingId],\n   *   saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),\n   * }))(YourComponent)\n   */\n  selectorFactory,\n  {\n  \n    // 用来组织HOC的名字\n    getDisplayName = name => `ConnectAdvanced(${name})`,\n\n    // 错误提示时展示用的名字\n    methodName = 'connectAdvanced',\n\n    // 如果已定义,则指定对应的子组件的render次数\n    // 用于在react-devtools观察不必要的render\n    renderCountProp = undefined,\n\n    // 表明HOC是否订阅state改变\n    shouldHandleStateChanges = true,\n\n    // 从contextprops中获取store的key\n    storeKey = 'store',\n\n    // 是否需要ref,详见HOC介绍\n    withRef = false,\n\n    // 其余的配置\n    ...connectOptions\n  } = {}\n) {\n  const subscriptionKey = storeKey + 'Subscription'\n  // 热加载版本\n  const version = hotReloadingVersion++\n\n  const contextTypes = {\n    [storeKey]: storeShape,\n    [subscriptionKey]: subscriptionShape,\n  }\n  const childContextTypes = {\n    [subscriptionKey]: subscriptionShape,\n  }\n\n  return function wrapWithConnect(WrappedComponent) {\n    // 如果不是生产环境,检测被HOC包裹的对象是否为合法的组件\n    if (process.env.NODE_ENV !== 'production') {\n      invariant(\n        isValidElementType(WrappedComponent),\n        `You must pass a component to the function returned by ` +\n        `${methodName}. Instead received ${JSON.stringify(WrappedComponent)}`\n      );\n    }\n\n    const wrappedComponentName = WrappedComponent.displayName\n      || WrappedComponent.name\n      || 'Component'\n\n    const displayName = getDisplayName(wrappedComponentName)\n\n    // 要传给selectorFactory的参数\n    const selectorFactoryOptions = {\n      // 用户要传入的参数\n      ...connectOptions,\n      getDisplayName,\n      methodName,\n      renderCountProp,\n      shouldHandleStateChanges,\n      storeKey,\n      withRef,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent\n    }\n    class Connect extends Component {\n      constructor(props, context) {\n        super(props, context)\n\n        this.version = version\n        this.state = {}\n        this.renderCount = 0\n        this.store = props[storeKey] || context[storeKey]\n        // 从props是否传入了store\n        this.propsMode = Boolean(props[storeKey])\n        // for ref\n        this.setWrappedInstance = this.setWrappedInstance.bind(this)\n\n        invariant(this.store,\n          `Could not find \"${storeKey}\" in either the context or props of ` +\n          `\"${displayName}\". Either wrap the root component in a <Provider>, ` +\n          `or explicitly pass \"${storeKey}\" as a prop to \"${displayName}\".`\n        )\n\n        this.initSelector()\n        this.initSubscription()\n      }\n\n      getChildContext() {\n        const subscription = this.propsMode ? null : this.subscription\n        return { [subscriptionKey]: subscription || this.context[subscriptionKey] }\n      }\n\n      componentDidMount() {\n        if (!shouldHandleStateChanges) return\n        this.subscription.trySubscribe()\n        this.selector.run(this.props)\n        if (this.selector.shouldComponentUpdate) this.forceUpdate()\n      }\n\n      componentWillReceiveProps(nextProps) {\n        this.selector.run(nextProps)\n      }\n\n      shouldComponentUpdate() {\n        return this.selector.shouldComponentUpdate\n      }\n\n      componentWillUnmount() {\n        if (this.subscription) this.subscription.tryUnsubscribe()\n        this.subscription = null\n        this.notifyNestedSubs = noop\n        this.store = null\n        this.selector.run = noop\n        this.selector.shouldComponentUpdate = false\n      }\n\n      getWrappedInstance() {\n        invariant(withRef,\n          `To access the wrapped instance, you need to specify ` +\n          `{ withRef: true } in the options argument of the ${methodName}() call.`\n        )\n        return this.wrappedInstance\n      }\n\n      setWrappedInstance(ref) {\n        this.wrappedInstance = ref\n      }\n\n      initSelector() {\n        // 为selectorFactory注入dispatch\n        const sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions)\n        // 为selector注入state,并通过mapstate计算nextProps来标记是否需要更新组件\n        // props和nextProps存储在selector中,在两次run时用来比较\n        this.selector = makeSelectorStateful(sourceSelector, this.store)\n        this.selector.run(this.props)\n      }\n\n      initSubscription() {\n        // 不监听直接返回\n        if (!shouldHandleStateChanges) return\n        // 如果是props传来的store则从props订阅,如果不是则从context订阅\n        const parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey]\n        // 为当前组件创建一个新的订阅\n        this.subscription = new Subscription(this.store, parentSub, this.onStateChange.bind(this))\n        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription)\n      }\n\n      // state改变的回调\n      onStateChange() {\n        // 比较props, 看是否需要更新组件\n        this.selector.run(this.props)\n\n        // 如果props没变,不需要更新组件,则通知下边的组件store改变,检测是否需要更新\n        // 如果触发了更新,则通过setState强制更新,通过didupdate延后通知子组件检查更新\n        // !!!在本组件update之后,子组件实际已经update,所以在didupdate后通知子组件检查更新\n        // 并不会造成再次渲染子组件,不需要担心嵌套connect的性能问题\n        if (!this.selector.shouldComponentUpdate) {\n          this.notifyNestedSubs()\n        } else {\n          // 在didupdate延后通知子组件检查更新\n          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate\n          this.setState(dummyState)\n        }\n      }\n\n      notifyNestedSubsOnComponentDidUpdate() {\n        this.componentDidUpdate = undefined\n        this.notifyNestedSubs()\n      }\n\n      isSubscribed() {\n        return Boolean(this.subscription) && this.subscription.isSubscribed()\n      }\n\n      addExtraProps(props) {\n        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props\n        const withExtras = { ...props }\n        if (withRef) withExtras.ref = this.setWrappedInstance\n        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++\n        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription\n        return withExtras\n      }\n\n      render() {\n        const selector = this.selector\n        selector.shouldComponentUpdate = false\n\n        if (selector.error) {\n          throw selector.error\n        } else {\n          return createElement(WrappedComponent, this.addExtraProps(selector.props))\n        }\n      }\n    }\n\n    Connect.WrappedComponent = WrappedComponent\n    Connect.displayName = displayName\n    Connect.childContextTypes = childContextTypes\n    Connect.contextTypes = contextTypes\n    Connect.propTypes = contextTypes\n\n    if (process.env.NODE_ENV !== 'production') {\n      Connect.prototype.componentWillUpdate = function componentWillUpdate() {\n        // 处理热加载\n        // 如果版本号改变则说明出发了热加载\n        // 更新版本号\n        // 重新初始化订阅,并解除订阅后重新订阅原有订阅\n        if (this.version !== version) {\n          this.version = version\n          this.initSelector()\n          let oldListeners = [];\n\n          if (this.subscription) {\n            oldListeners = this.subscription.listeners.get()\n            this.subscription.tryUnsubscribe()\n          }\n          this.initSubscription()\n          if (shouldHandleStateChanges) {\n            this.subscription.trySubscribe()\n            oldListeners.forEach(listener => this.subscription.listeners.subscribe(listener))\n          }\n        }\n      }\n    }\n\n    return hoistStatics(Connect, WrappedComponent)\n  }\n}\n```\n\n## Subscription\n订阅的实现是整个框架实现的核心部分之一, 它让每个Container管理自己的一个订阅状态, 并通过将子树叶的订阅集中在父树叶处理,来确保每次state更新造成的dom更新是自上而下的,保证了子树叶不会重复更新\n```javascript\n// encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\n\nconst CLEARED = null\nconst nullListeners = { notify() {} }\n\nfunction createListenerCollection() {\n  // the current/next pattern is copied from redux's createStore code.\n  // TODO: refactor+expose that code to be reusable here?\n  let current = []\n  let next = []\n\n  return {\n    clear() {\n      next = CLEARED\n      current = CLEARED\n    },\n\n    notify() {\n      const listeners = current = next\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i]()\n      }\n    },\n\n    get() {\n      return next\n    },\n\n    subscribe(listener) {\n      let isSubscribed = true\n      if (next === current) next = current.slice()\n      next.push(listener)\n\n      return function unsubscribe() {\n        if (!isSubscribed || current === CLEARED) return\n        isSubscribed = false\n\n        if (next === current) next = current.slice()\n        next.splice(next.indexOf(listener), 1)\n      }\n    }\n  }\n}\n\nexport default class Subscription {\n  constructor(store, parentSub, onStateChange) {\n    this.store = store\n    this.parentSub = parentSub\n    this.onStateChange = onStateChange\n    this.unsubscribe = null\n    this.listeners = nullListeners\n  }\n\n  addNestedSub(listener) {\n    this.trySubscribe()\n    return this.listeners.subscribe(listener)\n  }\n\n  notifyNestedSubs() {\n    this.listeners.notify()\n  }\n\n  isSubscribed() {\n    return Boolean(this.unsubscribe)\n  }\n\n  trySubscribe() {\n    if (!this.unsubscribe) {\n      // !!!划重点!敲黑板!\n      // 没有父级观察者的话，直接监听store change\n      // 有的话，添到父级下面，由父级传递变化\n      this.unsubscribe = this.parentSub\n        ? this.parentSub.addNestedSub(this.onStateChange)\n        : this.store.subscribe(this.onStateChange)\n \n      this.listeners = createListenerCollection()\n    }\n  }\n\n  tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe()\n      this.unsubscribe = null\n      this.listeners.clear()\n      this.listeners = nullListeners\n    }\n  }\n}\n```\n","slug":"react-redux","published":1,"updated":"2019-01-31T05:17:50.378Z","_id":"cjrk4wo1s00018ssbaav8ffmo","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"api\"><a href=\"#api\" class=\"headerlink\" title=\"api\"></a>api</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; Provider, createProvider, connectAdvanced, connect &#125;</span><br></pre></td></tr></table></figure>\n<p>从 index.js 可以知道, react-redux对外暴露了4个api,接下来我们去看每个api的实现</p>\n<h2 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Provider</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Provider作为顶层组件,通过context向下分发store</span></span><br><span class=\"line\">  <span class=\"comment\">// 之后Connect组件可以获取store</span></span><br><span class=\"line\">  getChildContext() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; [storeKey]: <span class=\"keyword\">this</span>[storeKey], [subscriptionKey]: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props, context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props, context)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>[storeKey] = props.store;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回children里仅有的子级。否则抛出异常</span></span><br><span class=\"line\">    <span class=\"comment\">// Provider必须有且仅有一个子组件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Children.only(<span class=\"keyword\">this</span>.props.children)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Provider.propTypes = &#123;</span><br><span class=\"line\">  store: storeShape.isRequired,</span><br><span class=\"line\">  children: PropTypes.element.isRequired,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Provider.childContextTypes = &#123;</span><br><span class=\"line\">  [storeKey]: storeShape.isRequired,</span><br><span class=\"line\">  [subscriptionKey]: subscriptionShape,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store的格式</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> storeShape = PropTypes.shape(&#123;</span><br><span class=\"line\">  subscribe: PropTypes.func.isRequired,</span><br><span class=\"line\">  dispatch: PropTypes.func.isRequired,</span><br><span class=\"line\">  getState: PropTypes.func.isRequired</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// subscription的格式</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> subscriptionShape = PropTypes.shape(&#123;</span><br><span class=\"line\">  trySubscribe: PropTypes.func.isRequired,</span><br><span class=\"line\">  tryUnsubscribe: PropTypes.func.isRequired,</span><br><span class=\"line\">  notifyNestedSubs: PropTypes.func.isRequired,</span><br><span class=\"line\">  isSubscribed: PropTypes.func.isRequired,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这里我们可以看到,Provider组件的作用就是作为根组件,向整个react树通过context分发store</p>\n<h2 id=\"createProvider\"><a href=\"#createProvider\" class=\"headerlink\" title=\"createProvider\"></a>createProvider</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createProvider</span>(<span class=\"params\">storeKey = <span class=\"string\">'store'</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// createProvider为自定义storeKey的Provider提供了创建接口</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> subscriptionKey = <span class=\"string\">`<span class=\"subst\">$&#123;storeKey&#125;</span>Subscription`</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Provider;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"connectAdvance\"><a href=\"#connectAdvance\" class=\"headerlink\" title=\"connectAdvance\"></a>connectAdvance</h2><p>因为connectAdvance的返回值是一个HOC(高阶组件),所以不熟悉HOC的话可以移步<a href=\"https://react.docschina.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"noopener\">HOC</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connectAdvanced</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"regexp\">/**</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   * selectFactory 负责从state,props,dispath计算新的props</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   * 定义方式如下:</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   * options是传递给connectAdvance的第二个参数和WrappedComponent的组合</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   * export default connectAdvanced((dispatch, options) =&gt; (state, props) =&gt; (&#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   *   thing: state.things[props.thingId],</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   *   saveThing: fields =&gt; dispatch(actionCreators.saveThing(props.thingId, fields)),</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   * &#125;))(YourComponent)</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  selectorFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 用来组织HOC的名字</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    getDisplayName = name =&gt; <span class=\"string\">`ConnectAdvanced(<span class=\"subst\">$&#123;name&#125;</span>)`</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 错误提示时展示用的名字</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    methodName = <span class=\"string\">'connectAdvanced'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 如果已定义,则指定对应的子组件的render次数</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 用于在react-devtools观察不必要的render</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    renderCountProp = undefined,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 表明HOC是否订阅state改变</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    shouldHandleStateChanges = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 从contextprops中获取store的key</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    storeKey = <span class=\"string\">'store'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 是否需要ref,详见HOC介绍</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    withRef = false,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 其余的配置</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ...connectOptions</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  &#125; = &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> subscriptionKey = storeKey + <span class=\"string\">'Subscription'</span></span><br><span class=\"line\">  <span class=\"comment\">// 热加载版本</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> version = hotReloadingVersion++</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> contextTypes = &#123;</span><br><span class=\"line\">    [storeKey]: storeShape,</span><br><span class=\"line\">    [subscriptionKey]: subscriptionShape,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> childContextTypes = &#123;</span><br><span class=\"line\">    [subscriptionKey]: subscriptionShape,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapWithConnect</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不是生产环境,检测被HOC包裹的对象是否为合法的组件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      invariant(</span><br><span class=\"line\">        isValidElementType(WrappedComponent),</span><br><span class=\"line\">        <span class=\"string\">`You must pass a component to the function returned by `</span> +</span><br><span class=\"line\">        <span class=\"string\">`<span class=\"subst\">$&#123;methodName&#125;</span>. Instead received <span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(WrappedComponent)&#125;</span>`</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrappedComponentName = WrappedComponent.displayName</span><br><span class=\"line\">      || WrappedComponent.name</span><br><span class=\"line\">      || <span class=\"string\">'Component'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> displayName = getDisplayName(wrappedComponentName)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 要传给selectorFactory的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> selectorFactoryOptions = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 用户要传入的参数</span></span><br><span class=\"line\">      ...connectOptions,</span><br><span class=\"line\">      getDisplayName,</span><br><span class=\"line\">      methodName,</span><br><span class=\"line\">      renderCountProp,</span><br><span class=\"line\">      shouldHandleStateChanges,</span><br><span class=\"line\">      storeKey,</span><br><span class=\"line\">      withRef,</span><br><span class=\"line\">      displayName,</span><br><span class=\"line\">      wrappedComponentName,</span><br><span class=\"line\">      WrappedComponent</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connect</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">constructor</span>(props, context) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props, context)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.version = version</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.renderCount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.store = props[storeKey] || context[storeKey]</span><br><span class=\"line\">        <span class=\"comment\">// 从props是否传入了store</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.propsMode = <span class=\"built_in\">Boolean</span>(props[storeKey])</span><br><span class=\"line\">        <span class=\"comment\">// for ref</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setWrappedInstance = <span class=\"keyword\">this</span>.setWrappedInstance.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        invariant(<span class=\"keyword\">this</span>.store,</span><br><span class=\"line\">          <span class=\"string\">`Could not find \"<span class=\"subst\">$&#123;storeKey&#125;</span>\" in either the context or props of `</span> +</span><br><span class=\"line\">          <span class=\"string\">`\"<span class=\"subst\">$&#123;displayName&#125;</span>\". Either wrap the root component in a &lt;Provider&gt;, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`or explicitly pass \"<span class=\"subst\">$&#123;storeKey&#125;</span>\" as a prop to \"<span class=\"subst\">$&#123;displayName&#125;</span>\".`</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initSelector()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initSubscription()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      getChildContext() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> subscription = <span class=\"keyword\">this</span>.propsMode ? <span class=\"literal\">null</span> : <span class=\"keyword\">this</span>.subscription</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; [subscriptionKey]: subscription || <span class=\"keyword\">this</span>.context[subscriptionKey] &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      componentDidMount() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!shouldHandleStateChanges) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subscription.trySubscribe()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector.run(<span class=\"keyword\">this</span>.props)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.selector.shouldComponentUpdate) <span class=\"keyword\">this</span>.forceUpdate()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      componentWillReceiveProps(nextProps) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector.run(nextProps)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      shouldComponentUpdate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.selector.shouldComponentUpdate</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      componentWillUnmount() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.subscription) <span class=\"keyword\">this</span>.subscription.tryUnsubscribe()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subscription = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyNestedSubs = noop</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.store = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector.run = noop</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector.shouldComponentUpdate = <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      getWrappedInstance() &#123;</span><br><span class=\"line\">        invariant(withRef,</span><br><span class=\"line\">          <span class=\"string\">`To access the wrapped instance, you need to specify `</span> +</span><br><span class=\"line\">          <span class=\"string\">`&#123; withRef: true &#125; in the options argument of the <span class=\"subst\">$&#123;methodName&#125;</span>() call.`</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.wrappedInstance</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      setWrappedInstance(ref) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.wrappedInstance = ref</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      initSelector() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为selectorFactory注入dispatch</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> sourceSelector = selectorFactory(<span class=\"keyword\">this</span>.store.dispatch, selectorFactoryOptions)</span><br><span class=\"line\">        <span class=\"comment\">// 为selector注入state,并通过mapstate计算nextProps来标记是否需要更新组件</span></span><br><span class=\"line\">        <span class=\"comment\">// props和nextProps存储在selector中,在两次run时用来比较</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector = makeSelectorStateful(sourceSelector, <span class=\"keyword\">this</span>.store)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector.run(<span class=\"keyword\">this</span>.props)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      initSubscription() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不监听直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!shouldHandleStateChanges) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果是props传来的store则从props订阅,如果不是则从context订阅</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> parentSub = (<span class=\"keyword\">this</span>.propsMode ? <span class=\"keyword\">this</span>.props : <span class=\"keyword\">this</span>.context)[subscriptionKey]</span><br><span class=\"line\">        <span class=\"comment\">// 为当前组件创建一个新的订阅</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subscription = <span class=\"keyword\">new</span> Subscription(<span class=\"keyword\">this</span>.store, parentSub, <span class=\"keyword\">this</span>.onStateChange.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyNestedSubs = <span class=\"keyword\">this</span>.subscription.notifyNestedSubs.bind(<span class=\"keyword\">this</span>.subscription)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// state改变的回调</span></span><br><span class=\"line\">      onStateChange() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 比较props, 看是否需要更新组件</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector.run(<span class=\"keyword\">this</span>.props)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果props没变,不需要更新组件,则通知下边的组件store改变,检测是否需要更新</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果触发了更新,则通过setState强制更新,通过didupdate延后通知子组件检查更新</span></span><br><span class=\"line\">        <span class=\"comment\">// !!!在本组件update之后,子组件实际已经update,所以在didupdate后通知子组件检查更新</span></span><br><span class=\"line\">        <span class=\"comment\">// 并不会造成再次渲染子组件,不需要担心嵌套connect的性能问题</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.selector.shouldComponentUpdate) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.notifyNestedSubs()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 在didupdate延后通知子组件检查更新</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.componentDidUpdate = <span class=\"keyword\">this</span>.notifyNestedSubsOnComponentDidUpdate</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.setState(dummyState)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      notifyNestedSubsOnComponentDidUpdate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.componentDidUpdate = <span class=\"literal\">undefined</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyNestedSubs()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      isSubscribed() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Boolean</span>(<span class=\"keyword\">this</span>.subscription) &amp;&amp; <span class=\"keyword\">this</span>.subscription.isSubscribed()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      addExtraProps(props) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!withRef &amp;&amp; !renderCountProp &amp;&amp; !(<span class=\"keyword\">this</span>.propsMode &amp;&amp; <span class=\"keyword\">this</span>.subscription)) <span class=\"keyword\">return</span> props</span><br><span class=\"line\">        <span class=\"keyword\">const</span> withExtras = &#123; ...props &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (withRef) withExtras.ref = <span class=\"keyword\">this</span>.setWrappedInstance</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (renderCountProp) withExtras[renderCountProp] = <span class=\"keyword\">this</span>.renderCount++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.propsMode &amp;&amp; <span class=\"keyword\">this</span>.subscription) withExtras[subscriptionKey] = <span class=\"keyword\">this</span>.subscription</span><br><span class=\"line\">        <span class=\"keyword\">return</span> withExtras</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> selector = <span class=\"keyword\">this</span>.selector</span><br><span class=\"line\">        selector.shouldComponentUpdate = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selector.error) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> selector.error</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> createElement(WrappedComponent, <span class=\"keyword\">this</span>.addExtraProps(selector.props))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Connect.WrappedComponent = WrappedComponent</span><br><span class=\"line\">    Connect.displayName = displayName</span><br><span class=\"line\">    Connect.childContextTypes = childContextTypes</span><br><span class=\"line\">    Connect.contextTypes = contextTypes</span><br><span class=\"line\">    Connect.propTypes = contextTypes</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      Connect.prototype.componentWillUpdate = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">componentWillUpdate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理热加载</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果版本号改变则说明出发了热加载</span></span><br><span class=\"line\">        <span class=\"comment\">// 更新版本号</span></span><br><span class=\"line\">        <span class=\"comment\">// 重新初始化订阅,并解除订阅后重新订阅原有订阅</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.version !== version) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.version = version</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.initSelector()</span><br><span class=\"line\">          <span class=\"keyword\">let</span> oldListeners = [];</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.subscription) &#123;</span><br><span class=\"line\">            oldListeners = <span class=\"keyword\">this</span>.subscription.listeners.get()</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.subscription.tryUnsubscribe()</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.initSubscription()</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (shouldHandleStateChanges) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.subscription.trySubscribe()</span><br><span class=\"line\">            oldListeners.forEach(<span class=\"function\"><span class=\"params\">listener</span> =&gt;</span> <span class=\"keyword\">this</span>.subscription.listeners.subscribe(listener))</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hoistStatics(Connect, WrappedComponent)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Subscription\"><a href=\"#Subscription\" class=\"headerlink\" title=\"Subscription\"></a>Subscription</h2><p>订阅的实现是整个框架实现的核心部分之一, 它让每个Container管理自己的一个订阅状态, 并通过将子树叶的订阅集中在父树叶处理,来确保每次state更新造成的dom更新是自上而下的,保证了子树叶不会重复更新<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// encapsulates the subscription logic for connecting a component to the redux store, as</span></span><br><span class=\"line\"><span class=\"comment\">// well as nesting subscriptions of descendant components, so that we can ensure the</span></span><br><span class=\"line\"><span class=\"comment\">// ancestor components re-render before descendants</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> CLEARED = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nullListeners = &#123; notify() &#123;&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createListenerCollection</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// the current/next pattern is copied from redux's createStore code.</span></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> refactor+expose that code to be reusable here?</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> next = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    clear() &#123;</span><br><span class=\"line\">      next = CLEARED</span><br><span class=\"line\">      current = CLEARED</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    notify() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listeners = current = next</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class=\"line\">        listeners[i]()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> next</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    subscribe(listener) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (next === current) next = current.slice()</span><br><span class=\"line\">      next.push(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unsubscribe</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isSubscribed || current === CLEARED) <span class=\"keyword\">return</span></span><br><span class=\"line\">        isSubscribed = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next === current) next = current.slice()</span><br><span class=\"line\">        next.splice(next.indexOf(listener), <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subscription</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(store, parentSub, onStateChange) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store = store</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parentSub = parentSub</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onStateChange = onStateChange</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.unsubscribe = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listeners = nullListeners</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  addNestedSub(listener) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.trySubscribe()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listeners.subscribe(listener)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  notifyNestedSubs() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listeners.notify()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  isSubscribed() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Boolean</span>(<span class=\"keyword\">this</span>.unsubscribe)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  trySubscribe() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.unsubscribe) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// !!!划重点!敲黑板!</span></span><br><span class=\"line\">      <span class=\"comment\">// 没有父级观察者的话，直接监听store change</span></span><br><span class=\"line\">      <span class=\"comment\">// 有的话，添到父级下面，由父级传递变化</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.unsubscribe = <span class=\"keyword\">this</span>.parentSub</span><br><span class=\"line\">        ? <span class=\"keyword\">this</span>.parentSub.addNestedSub(<span class=\"keyword\">this</span>.onStateChange)</span><br><span class=\"line\">        : <span class=\"keyword\">this</span>.store.subscribe(<span class=\"keyword\">this</span>.onStateChange)</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listeners = createListenerCollection()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tryUnsubscribe() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.unsubscribe) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.unsubscribe()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.unsubscribe = <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listeners.clear()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listeners = nullListeners</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"api\"><a href=\"#api\" class=\"headerlink\" title=\"api\"></a>api</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; Provider, createProvider, connectAdvanced, connect &#125;</span><br></pre></td></tr></table></figure>\n<p>从 index.js 可以知道, react-redux对外暴露了4个api,接下来我们去看每个api的实现</p>\n<h2 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Provider</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Provider作为顶层组件,通过context向下分发store</span></span><br><span class=\"line\">  <span class=\"comment\">// 之后Connect组件可以获取store</span></span><br><span class=\"line\">  getChildContext() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; [storeKey]: <span class=\"keyword\">this</span>[storeKey], [subscriptionKey]: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props, context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props, context)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>[storeKey] = props.store;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回children里仅有的子级。否则抛出异常</span></span><br><span class=\"line\">    <span class=\"comment\">// Provider必须有且仅有一个子组件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Children.only(<span class=\"keyword\">this</span>.props.children)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Provider.propTypes = &#123;</span><br><span class=\"line\">  store: storeShape.isRequired,</span><br><span class=\"line\">  children: PropTypes.element.isRequired,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Provider.childContextTypes = &#123;</span><br><span class=\"line\">  [storeKey]: storeShape.isRequired,</span><br><span class=\"line\">  [subscriptionKey]: subscriptionShape,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store的格式</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> storeShape = PropTypes.shape(&#123;</span><br><span class=\"line\">  subscribe: PropTypes.func.isRequired,</span><br><span class=\"line\">  dispatch: PropTypes.func.isRequired,</span><br><span class=\"line\">  getState: PropTypes.func.isRequired</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// subscription的格式</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> subscriptionShape = PropTypes.shape(&#123;</span><br><span class=\"line\">  trySubscribe: PropTypes.func.isRequired,</span><br><span class=\"line\">  tryUnsubscribe: PropTypes.func.isRequired,</span><br><span class=\"line\">  notifyNestedSubs: PropTypes.func.isRequired,</span><br><span class=\"line\">  isSubscribed: PropTypes.func.isRequired,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这里我们可以看到,Provider组件的作用就是作为根组件,向整个react树通过context分发store</p>\n<h2 id=\"createProvider\"><a href=\"#createProvider\" class=\"headerlink\" title=\"createProvider\"></a>createProvider</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createProvider</span>(<span class=\"params\">storeKey = <span class=\"string\">'store'</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// createProvider为自定义storeKey的Provider提供了创建接口</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> subscriptionKey = <span class=\"string\">`<span class=\"subst\">$&#123;storeKey&#125;</span>Subscription`</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Provider;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"connectAdvance\"><a href=\"#connectAdvance\" class=\"headerlink\" title=\"connectAdvance\"></a>connectAdvance</h2><p>因为connectAdvance的返回值是一个HOC(高阶组件),所以不熟悉HOC的话可以移步<a href=\"https://react.docschina.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"noopener\">HOC</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connectAdvanced</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"regexp\">/**</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   * selectFactory 负责从state,props,dispath计算新的props</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   * 定义方式如下:</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   * options是传递给connectAdvance的第二个参数和WrappedComponent的组合</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   * export default connectAdvanced((dispatch, options) =&gt; (state, props) =&gt; (&#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   *   thing: state.things[props.thingId],</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   *   saveThing: fields =&gt; dispatch(actionCreators.saveThing(props.thingId, fields)),</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   * &#125;))(YourComponent)</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">   */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  selectorFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 用来组织HOC的名字</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    getDisplayName = name =&gt; <span class=\"string\">`ConnectAdvanced(<span class=\"subst\">$&#123;name&#125;</span>)`</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 错误提示时展示用的名字</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    methodName = <span class=\"string\">'connectAdvanced'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 如果已定义,则指定对应的子组件的render次数</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 用于在react-devtools观察不必要的render</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    renderCountProp = undefined,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 表明HOC是否订阅state改变</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    shouldHandleStateChanges = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 从contextprops中获取store的key</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    storeKey = <span class=\"string\">'store'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 是否需要ref,详见HOC介绍</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    withRef = false,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"regexp\">//</span> 其余的配置</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ...connectOptions</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  &#125; = &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> subscriptionKey = storeKey + <span class=\"string\">'Subscription'</span></span><br><span class=\"line\">  <span class=\"comment\">// 热加载版本</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> version = hotReloadingVersion++</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> contextTypes = &#123;</span><br><span class=\"line\">    [storeKey]: storeShape,</span><br><span class=\"line\">    [subscriptionKey]: subscriptionShape,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> childContextTypes = &#123;</span><br><span class=\"line\">    [subscriptionKey]: subscriptionShape,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapWithConnect</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不是生产环境,检测被HOC包裹的对象是否为合法的组件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      invariant(</span><br><span class=\"line\">        isValidElementType(WrappedComponent),</span><br><span class=\"line\">        <span class=\"string\">`You must pass a component to the function returned by `</span> +</span><br><span class=\"line\">        <span class=\"string\">`<span class=\"subst\">$&#123;methodName&#125;</span>. Instead received <span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(WrappedComponent)&#125;</span>`</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrappedComponentName = WrappedComponent.displayName</span><br><span class=\"line\">      || WrappedComponent.name</span><br><span class=\"line\">      || <span class=\"string\">'Component'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> displayName = getDisplayName(wrappedComponentName)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 要传给selectorFactory的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> selectorFactoryOptions = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 用户要传入的参数</span></span><br><span class=\"line\">      ...connectOptions,</span><br><span class=\"line\">      getDisplayName,</span><br><span class=\"line\">      methodName,</span><br><span class=\"line\">      renderCountProp,</span><br><span class=\"line\">      shouldHandleStateChanges,</span><br><span class=\"line\">      storeKey,</span><br><span class=\"line\">      withRef,</span><br><span class=\"line\">      displayName,</span><br><span class=\"line\">      wrappedComponentName,</span><br><span class=\"line\">      WrappedComponent</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connect</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">constructor</span>(props, context) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props, context)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.version = version</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.renderCount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.store = props[storeKey] || context[storeKey]</span><br><span class=\"line\">        <span class=\"comment\">// 从props是否传入了store</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.propsMode = <span class=\"built_in\">Boolean</span>(props[storeKey])</span><br><span class=\"line\">        <span class=\"comment\">// for ref</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setWrappedInstance = <span class=\"keyword\">this</span>.setWrappedInstance.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        invariant(<span class=\"keyword\">this</span>.store,</span><br><span class=\"line\">          <span class=\"string\">`Could not find \"<span class=\"subst\">$&#123;storeKey&#125;</span>\" in either the context or props of `</span> +</span><br><span class=\"line\">          <span class=\"string\">`\"<span class=\"subst\">$&#123;displayName&#125;</span>\". Either wrap the root component in a &lt;Provider&gt;, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`or explicitly pass \"<span class=\"subst\">$&#123;storeKey&#125;</span>\" as a prop to \"<span class=\"subst\">$&#123;displayName&#125;</span>\".`</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initSelector()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initSubscription()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      getChildContext() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> subscription = <span class=\"keyword\">this</span>.propsMode ? <span class=\"literal\">null</span> : <span class=\"keyword\">this</span>.subscription</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; [subscriptionKey]: subscription || <span class=\"keyword\">this</span>.context[subscriptionKey] &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      componentDidMount() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!shouldHandleStateChanges) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subscription.trySubscribe()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector.run(<span class=\"keyword\">this</span>.props)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.selector.shouldComponentUpdate) <span class=\"keyword\">this</span>.forceUpdate()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      componentWillReceiveProps(nextProps) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector.run(nextProps)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      shouldComponentUpdate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.selector.shouldComponentUpdate</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      componentWillUnmount() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.subscription) <span class=\"keyword\">this</span>.subscription.tryUnsubscribe()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subscription = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyNestedSubs = noop</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.store = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector.run = noop</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector.shouldComponentUpdate = <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      getWrappedInstance() &#123;</span><br><span class=\"line\">        invariant(withRef,</span><br><span class=\"line\">          <span class=\"string\">`To access the wrapped instance, you need to specify `</span> +</span><br><span class=\"line\">          <span class=\"string\">`&#123; withRef: true &#125; in the options argument of the <span class=\"subst\">$&#123;methodName&#125;</span>() call.`</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.wrappedInstance</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      setWrappedInstance(ref) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.wrappedInstance = ref</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      initSelector() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为selectorFactory注入dispatch</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> sourceSelector = selectorFactory(<span class=\"keyword\">this</span>.store.dispatch, selectorFactoryOptions)</span><br><span class=\"line\">        <span class=\"comment\">// 为selector注入state,并通过mapstate计算nextProps来标记是否需要更新组件</span></span><br><span class=\"line\">        <span class=\"comment\">// props和nextProps存储在selector中,在两次run时用来比较</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector = makeSelectorStateful(sourceSelector, <span class=\"keyword\">this</span>.store)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector.run(<span class=\"keyword\">this</span>.props)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      initSubscription() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不监听直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!shouldHandleStateChanges) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果是props传来的store则从props订阅,如果不是则从context订阅</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> parentSub = (<span class=\"keyword\">this</span>.propsMode ? <span class=\"keyword\">this</span>.props : <span class=\"keyword\">this</span>.context)[subscriptionKey]</span><br><span class=\"line\">        <span class=\"comment\">// 为当前组件创建一个新的订阅</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subscription = <span class=\"keyword\">new</span> Subscription(<span class=\"keyword\">this</span>.store, parentSub, <span class=\"keyword\">this</span>.onStateChange.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyNestedSubs = <span class=\"keyword\">this</span>.subscription.notifyNestedSubs.bind(<span class=\"keyword\">this</span>.subscription)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// state改变的回调</span></span><br><span class=\"line\">      onStateChange() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 比较props, 看是否需要更新组件</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selector.run(<span class=\"keyword\">this</span>.props)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果props没变,不需要更新组件,则通知下边的组件store改变,检测是否需要更新</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果触发了更新,则通过setState强制更新,通过didupdate延后通知子组件检查更新</span></span><br><span class=\"line\">        <span class=\"comment\">// !!!在本组件update之后,子组件实际已经update,所以在didupdate后通知子组件检查更新</span></span><br><span class=\"line\">        <span class=\"comment\">// 并不会造成再次渲染子组件,不需要担心嵌套connect的性能问题</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.selector.shouldComponentUpdate) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.notifyNestedSubs()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 在didupdate延后通知子组件检查更新</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.componentDidUpdate = <span class=\"keyword\">this</span>.notifyNestedSubsOnComponentDidUpdate</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.setState(dummyState)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      notifyNestedSubsOnComponentDidUpdate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.componentDidUpdate = <span class=\"literal\">undefined</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyNestedSubs()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      isSubscribed() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Boolean</span>(<span class=\"keyword\">this</span>.subscription) &amp;&amp; <span class=\"keyword\">this</span>.subscription.isSubscribed()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      addExtraProps(props) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!withRef &amp;&amp; !renderCountProp &amp;&amp; !(<span class=\"keyword\">this</span>.propsMode &amp;&amp; <span class=\"keyword\">this</span>.subscription)) <span class=\"keyword\">return</span> props</span><br><span class=\"line\">        <span class=\"keyword\">const</span> withExtras = &#123; ...props &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (withRef) withExtras.ref = <span class=\"keyword\">this</span>.setWrappedInstance</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (renderCountProp) withExtras[renderCountProp] = <span class=\"keyword\">this</span>.renderCount++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.propsMode &amp;&amp; <span class=\"keyword\">this</span>.subscription) withExtras[subscriptionKey] = <span class=\"keyword\">this</span>.subscription</span><br><span class=\"line\">        <span class=\"keyword\">return</span> withExtras</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> selector = <span class=\"keyword\">this</span>.selector</span><br><span class=\"line\">        selector.shouldComponentUpdate = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selector.error) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> selector.error</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> createElement(WrappedComponent, <span class=\"keyword\">this</span>.addExtraProps(selector.props))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Connect.WrappedComponent = WrappedComponent</span><br><span class=\"line\">    Connect.displayName = displayName</span><br><span class=\"line\">    Connect.childContextTypes = childContextTypes</span><br><span class=\"line\">    Connect.contextTypes = contextTypes</span><br><span class=\"line\">    Connect.propTypes = contextTypes</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      Connect.prototype.componentWillUpdate = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">componentWillUpdate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理热加载</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果版本号改变则说明出发了热加载</span></span><br><span class=\"line\">        <span class=\"comment\">// 更新版本号</span></span><br><span class=\"line\">        <span class=\"comment\">// 重新初始化订阅,并解除订阅后重新订阅原有订阅</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.version !== version) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.version = version</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.initSelector()</span><br><span class=\"line\">          <span class=\"keyword\">let</span> oldListeners = [];</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.subscription) &#123;</span><br><span class=\"line\">            oldListeners = <span class=\"keyword\">this</span>.subscription.listeners.get()</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.subscription.tryUnsubscribe()</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.initSubscription()</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (shouldHandleStateChanges) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.subscription.trySubscribe()</span><br><span class=\"line\">            oldListeners.forEach(<span class=\"function\"><span class=\"params\">listener</span> =&gt;</span> <span class=\"keyword\">this</span>.subscription.listeners.subscribe(listener))</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hoistStatics(Connect, WrappedComponent)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Subscription\"><a href=\"#Subscription\" class=\"headerlink\" title=\"Subscription\"></a>Subscription</h2><p>订阅的实现是整个框架实现的核心部分之一, 它让每个Container管理自己的一个订阅状态, 并通过将子树叶的订阅集中在父树叶处理,来确保每次state更新造成的dom更新是自上而下的,保证了子树叶不会重复更新<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// encapsulates the subscription logic for connecting a component to the redux store, as</span></span><br><span class=\"line\"><span class=\"comment\">// well as nesting subscriptions of descendant components, so that we can ensure the</span></span><br><span class=\"line\"><span class=\"comment\">// ancestor components re-render before descendants</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> CLEARED = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nullListeners = &#123; notify() &#123;&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createListenerCollection</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// the current/next pattern is copied from redux's createStore code.</span></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> refactor+expose that code to be reusable here?</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> next = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    clear() &#123;</span><br><span class=\"line\">      next = CLEARED</span><br><span class=\"line\">      current = CLEARED</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    notify() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listeners = current = next</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class=\"line\">        listeners[i]()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> next</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    subscribe(listener) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (next === current) next = current.slice()</span><br><span class=\"line\">      next.push(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unsubscribe</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isSubscribed || current === CLEARED) <span class=\"keyword\">return</span></span><br><span class=\"line\">        isSubscribed = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next === current) next = current.slice()</span><br><span class=\"line\">        next.splice(next.indexOf(listener), <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subscription</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(store, parentSub, onStateChange) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store = store</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parentSub = parentSub</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onStateChange = onStateChange</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.unsubscribe = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listeners = nullListeners</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  addNestedSub(listener) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.trySubscribe()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listeners.subscribe(listener)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  notifyNestedSubs() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listeners.notify()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  isSubscribed() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Boolean</span>(<span class=\"keyword\">this</span>.unsubscribe)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  trySubscribe() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.unsubscribe) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// !!!划重点!敲黑板!</span></span><br><span class=\"line\">      <span class=\"comment\">// 没有父级观察者的话，直接监听store change</span></span><br><span class=\"line\">      <span class=\"comment\">// 有的话，添到父级下面，由父级传递变化</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.unsubscribe = <span class=\"keyword\">this</span>.parentSub</span><br><span class=\"line\">        ? <span class=\"keyword\">this</span>.parentSub.addNestedSub(<span class=\"keyword\">this</span>.onStateChange)</span><br><span class=\"line\">        : <span class=\"keyword\">this</span>.store.subscribe(<span class=\"keyword\">this</span>.onStateChange)</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listeners = createListenerCollection()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tryUnsubscribe() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.unsubscribe) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.unsubscribe()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.unsubscribe = <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listeners.clear()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listeners = nullListeners</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"redux源码解析","date":"2018-11-30T05:11:33.000Z","_content":"\n前几天写完了react-redux的源码解析,接下来看一下redux的源码,继续了解react常用套件的底层原理\n\n## API\nredux向我们暴露了6个api,分别是:\n1. createStore\n2. combineReducers\n3. bindActionCreators\n4. applyMiddleware\n5. compose\n5. _____DO_NOT_USE_____ActionTypes\n\n下面就逐个分析这些api的实现:\n\n## createStore\ncreteStore无疑是redux的核心实现,应重点关注\n\n首先createStore接受三个参数:\n1. reducer: 计算下一个状态树的纯函数\n2. preloadedState: 初始状态树,由用户定义\n3. enhancer: 增强函数,可以通过这里新增中间件等功能\n\ncreateStore的返回值是一个功能完整的状态容器:\n1. state状态树\n2. getState: 阅读状态的方法\n3. dispatch: (唯一)改变状态的方法\n4. subscription: 订阅状态改变的方法\n\n下面看源码:\n```javascript\nexport default function createStore(reducer, preloadedState, enhancer) {\n  // 处理没有初始状态,第二个参数传入enhancer的情况\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  // 若enhancer是函数则调用并作为返回值返回调用结果\n  // 非函数则抛出错误\n  // tip: 这里暂时先考虑没有enhancer的情况\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.')\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n\n  // reducer非函数抛出错误\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.')\n  }\n\n  let currentReducer = reducer\n  let currentState = preloadedState\n  let currentListeners = []\n  let nextListeners = currentListeners\n  let isDispatching = false\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n\n  // 读取状态树\n  // 如果正在dispatch:\n  // 那么不可以获取,并抛出错误\n  // 不能保证此时状态是“你想要的”那个状态,因为状态正在改变\n  // 为确保取到的状态正确可以从最后一个reducer传入的位置取\n  function getState() {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n          'The reducer has already received the state as an argument. ' +\n          'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState\n  }\n\n  // 注册订阅\n  // 这里本来有很大一段注释,大致意思是说:\n  // 每次dispatch后触发的订阅是dispatch前保存的快照,\n  // 在本次dispatch途中或者之后注册的订阅不会被本次dispatch触发\n  // tip: 1.注意快照的实现,2.注意对reducer执行中的控制\n  function subscribe(listener) {\n    // listener不是函数:你没有资格订阅!\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.')\n    }\n\n    // 在reducer执行是无法注册订阅\n    // 想看本次dispatch的结果请getState\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See http://redux.js.org/docs/api/Store.html#subscribe for more details.'\n      )\n    }\n\n    // 闭包保存是否已订阅的状态\n    let isSubscribed = true\n\n    // 确保nextListener和currentListener不是指向同一个数组\n    // 以通过currenListener保留快照\n    ensureCanMutateNextListeners()\n    // 注册订阅成功!!!\n    nextListeners.push(listener)\n\n    // 注册订阅的返回值是一个注销订阅的函数\n    return function unsubscribe() {\n      // 未订阅就不需要注销订阅了,直接返回\n      if (!isSubscribed) {\n        return\n      }\n\n      // 还是老问题,reducer执行中无法注销订阅\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See http://redux.js.org/docs/api/Store.html#subscribe for more details.'\n        )\n      }\n\n      // 置是否已订阅状态为false\n      isSubscribed = false\n\n      // 保留快照\n      ensureCanMutateNextListeners()\n      // 从订阅列表中删除本订阅\n      // 注销成功!!!\n      onst index = nextListeners.indexOf(listener)\n      nextListeners.splice(index, 1)\n    }\n  }\n\n  // 触发action\n  // 通过reducer和当前状态树计算并返回下一个状态树\n  // 通知监听\n  function dispatch(action) {\n    // 原生dispatch只支持普通对象作为action\n    // plainobject 是指字面量或者new Object()创建的对象\n    if (!isPlainObject(action)) {\n      throw new Error(\n        'Actions must be plain objects. ' +\n          'Use custom middleware for async actions.'\n      )\n    }\n\n    // action必须有type\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      )\n    }\n\n    // 还是老问题,正在执行reducer当然不能执行另一个dispatch了\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    // 执行reducer,然后更新currentState\n    // 终于看到掌控一切的isDispatching状态了,...也很简单=.=\n    try {\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    // 获取最新的订阅列表快照,并通知它们状态改变\n    // 看到这里感觉说订阅列表的快照是保存在本次dispatch完成且通知订阅前时比较合适?\n    // 实际上和dispatch前是一样的,因为在dispatch时无法继续注册或注销订阅,那么dispatch\n    // 前的快照就是当前位置的快照\n    // 要理解订阅列表快照的作用是保证在\"通知订阅状态改变\"时本次使用的订阅列表不变\n    // 而执行dispatch时的订阅列表不变是由isDispatching变量控制的\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]\n      listener()\n    }\n\n    // 返回值是本次执行的action\n    return action\n  }\n\n  // 用于动态修改reducer, 实现方法是替换reducer后触发内置`REPLACE`action\n  // `REPLACE`的key是一个随机字符串防止用户“误触”\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.')\n    }\n\n    currentReducer = nextReducer\n    dispatch({ type: ActionTypes.REPLACE })\n  }\n\n  // 为observable/reactive库预留的交互接口\n  // 需要看了observable等库的原理才能解析,不过不影响大局,跳过\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.')\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState())\n          }\n        }\n\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n\n  // 创建状态树时会先执行内置`INIT`action\n  // 目的是在没有提供preloadedState时创建一个空树\n  // 注意:因为`INIT`这个action实际不存在,所以返回的是reducer里的默认返回值\n  // 如果reducer里没有默认返回值,那么state将是undefined\n  // 所以所有reducer都必须默认在匹配不到type时返回上一个state,\n  // 并且没有perloadedState时,需为state设定缺省值\n  dispatch({ type: ActionTypes.INIT })\n\n  // 都给你们用!\n  return {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  }\n}\n```\n\n## combineReducers\n将多个reducers组合成一个的工具\n\n```javascript\n// 输出reducer返回undefined时的错误信息\nfunction getUndefinedStateErrorMessage(key, action) {\n  const actionType = action && action.type\n  const actionDescription =\n    (actionType && `action \"${String(actionType)}\"`) || 'an action'\n\n  return (\n    `Given ${actionDescription}, reducer \"${key}\" returned undefined. ` +\n    `To ignore an action, you must explicitly return the previous state. ` +\n    `If you want this reducer to hold no value, you can return null instead of undefined.`\n  )\n}\n\n// 执行新的reducer过程中的一些警告\nfunction getUnexpectedStateShapeWarningMessage(\n  inputState,\n  reducers,\n  action,\n  unexpectedKeyCache\n) {\n  const reducerKeys = Object.keys(reducers)\n  // 因为组合后的新reducer有state的缺省值,所以如果`INIT`action\n  // 的state有问题,那么肯定是传了preloadedState的,因为如果不传,\n  // 新reducer的state缺省值是{}是没有问题的\n  const argumentName =\n    action && action.type === ActionTypes.INIT\n      ? 'preloadedState argument passed to createStore'\n      : 'previous state received by the reducer'\n\n  // 生成的新reducer用的reducers没有合法的\n  if (reducerKeys.length === 0) {\n    return (\n      'Store does not have a valid reducer. Make sure the argument passed ' +\n      'to combineReducers is an object whose values are reducers.'\n    )\n  }\n\n  // 输入的state是否是基本对象\n  if (!isPlainObject(inputState)) {\n    return (\n      `The ${argumentName} has unexpected type of \"` +\n      {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] +\n      `\". Expected argument to be an object with the following ` +\n      `keys: \"${reducerKeys.join('\", \"')}\"`\n    )\n  }\n\n  // 检测state中是否存在与reducer不匹配的key\n  // 并将其置入缓存\n  const unexpectedKeys = Object.keys(inputState).filter(\n    key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]\n  )\n\n  unexpectedKeys.forEach(key => {\n    unexpectedKeyCache[key] = true\n  })\n\n  if (action && action.type === ActionTypes.REPLACE) return\n\n  if (unexpectedKeys.length > 0) {\n    return (\n      `Unexpected ${unexpectedKeys.length > 1 ? 'keys' : 'key'} ` +\n      `\"${unexpectedKeys.join('\", \"')}\" found in ${argumentName}. ` +\n      `Expected to find one of the known reducer keys instead: ` +\n      `\"${reducerKeys.join('\", \"')}\". Unexpected keys will be ignored.`\n    )\n  }\n}\n\n// 确定reducers是否是合法的\nfunction assertReducerShape(reducers) {\n  // 遍历reducers\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key]\n    // 执行`INIT`action的返回值\n    // 若是undefined就抛出错误\n    // 这里就如上文提到的\n    // 1. 需要有state的缺省值\n    // 2. 需要在actiontype匹配不到时,返回上一个state(若为undefined则返回缺省值)\n    // !!! 这里看到,如果使用combineReducers的话,\n    // 因为在检测是传入的state参数是undefined,\n    // 所以不论有没有perloadedState, reducer都要遵从上边的原则\n    const initialState = reducer(undefined, { type: ActionTypes.INIT })\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined during initialization. ` +\n          `If the state passed to the reducer is undefined, you must ` +\n          `explicitly return the initial state. The initial state may ` +\n          `not be undefined. If you don't want to set a value for this reducer, ` +\n          `you can use null instead of undefined.`\n      )\n    }\n\n    // 防止某些用户,通过处理ActionsTypes.INIT绕过此检测\n    const type =\n      '@@redux/PROBE_UNKNOWN_ACTION_' +\n      Math.random()\n        .toString(36)\n        .substring(7)\n        .split('')\n        .join('.')\n    if (typeof reducer(undefined, { type }) === 'undefined') {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined when probed with a random type. ` +\n          `Don't try to handle ${\n            ActionTypes.INIT\n          } or other actions in \"redux/*\" ` +\n          `namespace. They are considered private. Instead, you must return the ` +\n          `current state for any unknown actions, unless it is undefined, ` +\n          `in which case you must return the initial state, regardless of the ` +\n          `action type. The initial state may not be undefined, but can be null.`\n      )\n    }\n  })\n}\n\n// 将多个不同的reducers合并为一个\nexport default function combineReducers(reducers) {\n  // 获取所有reducers的key\n  const reducerKeys = Object.keys(reducers)\n  // 排除掉非函数的reducers的合集\n  const finalReducers = {}\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n\n    // 不存在对应key的reducer,警告\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(`No reducer provided for key \"${key}\"`)\n      }\n    }\n\n    // 确认是函数的reducer,添加到finalReducers里\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key]\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers)\n\n  let unexpectedKeyCache\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {}\n  }\n\n  // 检测reducers是否合法(触发匹配不到的actionType不会返回undefined)\n  // 如果其中有不和法的reducer,记录错误\n  let shapeAssertionError\n  try {\n    assertReducerShape(finalReducers)\n  } catch (e) {\n    shapeAssertionError = e\n  }\n\n  // 生成新的reducer\n  return function combination(state = {}, action) {\n    // 存在不合法的reducer,直接抛出错误\n    if (shapeAssertionError) {\n      throw shapeAssertionError\n    }\n\n    // 开发环境,提示警告\n    // 1. 检测生成的新reducer用的reducers是否没有可用的\n    // 2. 检测输入的state是否是基本对象\n    // 3. 检测state的key是否有不与reducer对应的\n    if (process.env.NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(\n        state,\n        finalReducers,\n        action,\n        unexpectedKeyCache\n      )\n      if (warningMessage) {\n        warning(warningMessage)\n      }\n    }\n\n    let hasChanged = false\n    const nextState = {}\n    // 这里新的reducer生成的state是用reducer的key划分的state\n    // reducer执行的时候也是改变对应的state[key]\n    // 为匹配到的state[key]不会发生改变!!!默认返回上一个state的重要性\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i]\n      const reducer = finalReducers[key]\n      const previousStateForKey = state[key]\n      const nextStateForKey = reducer(previousStateForKey, action)\n      if (typeof nextStateForKey === 'undefined') {\n        const errorMessage = getUndefinedStateErrorMessage(key, action)\n        throw new Error(errorMessage)\n      }\n      nextState[key] = nextStateForKey\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    return hasChanged ? nextState : state\n  }\n}\n\n```\n\n## bindActionCreators\n> actionCreator: 一个创建 action 的函数\n> bindActionCreator: 把一个 value 为不同 action creator 的对象，转成拥有同名 key 的对象。同时使用 dispatch 对每个 action creator 进行包装，以便可以直接调用它们\n\n```javascript\nfunction bindActionCreator(actionCreator, dispatch) {\n  // 返回一个函数, 我们调用返回的函数时,就会触发dispatch\n  return function() {\n    return dispatch(actionCreator.apply(this, arguments))\n  }\n}\n\nexport default function bindActionCreators(actionCreators, dispatch) {\n  // 如果是一个actionCreator那么直接包装dispatch\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch)\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\n      `bindActionCreators expected an object or a function, instead received ${\n        actionCreators === null ? 'null' : typeof actionCreators\n      }. ` +\n        `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`\n    )\n  }\n\n  // 为每个actionCreator包装dispatch,并用key分割\n  const keys = Object.keys(actionCreators)\n  const boundActionCreators = {}\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)\n    }\n  }\n  return boundActionCreators\n}\n\n```\n## compose\ncompose是函数式编程的一个很重要的工具\n作用是生成一个把作为参数的函数从左到右地依次把执行结果传入下一个函数的新函数\n```javascript\nexport default function compose(...funcs) {\n  // 如果没有参数,那么返回返回原值的函数\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  // 如果只有一个参数,那么直接返回参数\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  // 如果有一个以上的参数,那么递归生成新函数\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n```\n\n## applyMiddleware\n中间件是很重要的一部分,是帮助扩展dispatch的唯一途径\n使用方法createStore(reducers, preloadState, applayMiddleWare(...midlewares))\n同时这一部分用到了函数时编程的思想,所以比较难理解\n> ...middleware (arguments): 遵循 Redux middleware API 的函数。每个 middleware 接受 Store 的 dispatch 和 getState 函数作为命名参数，并返回一个函数。该函数会被传入被称为 next 的下一个 middleware 的 dispatch 方法，并返回一个接收 action 的新函数，这个函数可以直接调用 next(action)，或者在其他需要的时刻调用，甚至根本不去调用它。调用链中最后一个 middleware 会接受真实的 store 的 dispatch 方法作为 next 参数，并借此结束调用链。所以，middleware 的函数签名是 ({ getState, dispatch }) => next => action\n\n```javascript\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        `Dispatching while constructing your middleware is not allowed. ` +\n          `Other middleware would not be applied to this dispatch.`\n      )\n    }\n    let chain = []\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    // 这部分比较难理解,不妨假设有三个中间件,分别是f1, f2, f3\n    // 为了方便c1 = f1(middlewareAPI), c2 = f2(middlewareAPI), c3 = f3(middlewareAPI)\n    // 这里chain = [c1, c2 , c3]\n    chain = middlewares.map(middleware => middleware(middlewareAPI))\n    // 这里comopse\n    // dispatch = c1(c2(c3(store.dispatch)))\n    // 那么就是c3最先执行,以真实的store.dispatch传入,作为next\n    // next => action => {}\n    // 所以返回的是一个action => {}, 这其实是一个新的dispatch\n    // 那么c2接受的next就是c3返回的新的dispatch\n    // 以此类推,c1最后会返回它自己生成的一个dispatch\n    // 所以最后得到的就是一个dispatch\n    dispatch = compose(...chain)(store.dispatch)\n\n    // 最后真正执行dispatch(action)的时候,还是c1的next,c2的next,c3的next这样的顺序执行的,最终执行真正的store.dispatch:\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n```\n","source":"_posts/redux.md","raw":"---\ntitle: redux源码解析\ndate: 2018-11-30 13:11:33\ntags:\n---\n\n前几天写完了react-redux的源码解析,接下来看一下redux的源码,继续了解react常用套件的底层原理\n\n## API\nredux向我们暴露了6个api,分别是:\n1. createStore\n2. combineReducers\n3. bindActionCreators\n4. applyMiddleware\n5. compose\n5. _____DO_NOT_USE_____ActionTypes\n\n下面就逐个分析这些api的实现:\n\n## createStore\ncreteStore无疑是redux的核心实现,应重点关注\n\n首先createStore接受三个参数:\n1. reducer: 计算下一个状态树的纯函数\n2. preloadedState: 初始状态树,由用户定义\n3. enhancer: 增强函数,可以通过这里新增中间件等功能\n\ncreateStore的返回值是一个功能完整的状态容器:\n1. state状态树\n2. getState: 阅读状态的方法\n3. dispatch: (唯一)改变状态的方法\n4. subscription: 订阅状态改变的方法\n\n下面看源码:\n```javascript\nexport default function createStore(reducer, preloadedState, enhancer) {\n  // 处理没有初始状态,第二个参数传入enhancer的情况\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  // 若enhancer是函数则调用并作为返回值返回调用结果\n  // 非函数则抛出错误\n  // tip: 这里暂时先考虑没有enhancer的情况\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.')\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n\n  // reducer非函数抛出错误\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.')\n  }\n\n  let currentReducer = reducer\n  let currentState = preloadedState\n  let currentListeners = []\n  let nextListeners = currentListeners\n  let isDispatching = false\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n\n  // 读取状态树\n  // 如果正在dispatch:\n  // 那么不可以获取,并抛出错误\n  // 不能保证此时状态是“你想要的”那个状态,因为状态正在改变\n  // 为确保取到的状态正确可以从最后一个reducer传入的位置取\n  function getState() {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n          'The reducer has already received the state as an argument. ' +\n          'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState\n  }\n\n  // 注册订阅\n  // 这里本来有很大一段注释,大致意思是说:\n  // 每次dispatch后触发的订阅是dispatch前保存的快照,\n  // 在本次dispatch途中或者之后注册的订阅不会被本次dispatch触发\n  // tip: 1.注意快照的实现,2.注意对reducer执行中的控制\n  function subscribe(listener) {\n    // listener不是函数:你没有资格订阅!\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.')\n    }\n\n    // 在reducer执行是无法注册订阅\n    // 想看本次dispatch的结果请getState\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See http://redux.js.org/docs/api/Store.html#subscribe for more details.'\n      )\n    }\n\n    // 闭包保存是否已订阅的状态\n    let isSubscribed = true\n\n    // 确保nextListener和currentListener不是指向同一个数组\n    // 以通过currenListener保留快照\n    ensureCanMutateNextListeners()\n    // 注册订阅成功!!!\n    nextListeners.push(listener)\n\n    // 注册订阅的返回值是一个注销订阅的函数\n    return function unsubscribe() {\n      // 未订阅就不需要注销订阅了,直接返回\n      if (!isSubscribed) {\n        return\n      }\n\n      // 还是老问题,reducer执行中无法注销订阅\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See http://redux.js.org/docs/api/Store.html#subscribe for more details.'\n        )\n      }\n\n      // 置是否已订阅状态为false\n      isSubscribed = false\n\n      // 保留快照\n      ensureCanMutateNextListeners()\n      // 从订阅列表中删除本订阅\n      // 注销成功!!!\n      onst index = nextListeners.indexOf(listener)\n      nextListeners.splice(index, 1)\n    }\n  }\n\n  // 触发action\n  // 通过reducer和当前状态树计算并返回下一个状态树\n  // 通知监听\n  function dispatch(action) {\n    // 原生dispatch只支持普通对象作为action\n    // plainobject 是指字面量或者new Object()创建的对象\n    if (!isPlainObject(action)) {\n      throw new Error(\n        'Actions must be plain objects. ' +\n          'Use custom middleware for async actions.'\n      )\n    }\n\n    // action必须有type\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      )\n    }\n\n    // 还是老问题,正在执行reducer当然不能执行另一个dispatch了\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    // 执行reducer,然后更新currentState\n    // 终于看到掌控一切的isDispatching状态了,...也很简单=.=\n    try {\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    // 获取最新的订阅列表快照,并通知它们状态改变\n    // 看到这里感觉说订阅列表的快照是保存在本次dispatch完成且通知订阅前时比较合适?\n    // 实际上和dispatch前是一样的,因为在dispatch时无法继续注册或注销订阅,那么dispatch\n    // 前的快照就是当前位置的快照\n    // 要理解订阅列表快照的作用是保证在\"通知订阅状态改变\"时本次使用的订阅列表不变\n    // 而执行dispatch时的订阅列表不变是由isDispatching变量控制的\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]\n      listener()\n    }\n\n    // 返回值是本次执行的action\n    return action\n  }\n\n  // 用于动态修改reducer, 实现方法是替换reducer后触发内置`REPLACE`action\n  // `REPLACE`的key是一个随机字符串防止用户“误触”\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.')\n    }\n\n    currentReducer = nextReducer\n    dispatch({ type: ActionTypes.REPLACE })\n  }\n\n  // 为observable/reactive库预留的交互接口\n  // 需要看了observable等库的原理才能解析,不过不影响大局,跳过\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.')\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState())\n          }\n        }\n\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n\n  // 创建状态树时会先执行内置`INIT`action\n  // 目的是在没有提供preloadedState时创建一个空树\n  // 注意:因为`INIT`这个action实际不存在,所以返回的是reducer里的默认返回值\n  // 如果reducer里没有默认返回值,那么state将是undefined\n  // 所以所有reducer都必须默认在匹配不到type时返回上一个state,\n  // 并且没有perloadedState时,需为state设定缺省值\n  dispatch({ type: ActionTypes.INIT })\n\n  // 都给你们用!\n  return {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  }\n}\n```\n\n## combineReducers\n将多个reducers组合成一个的工具\n\n```javascript\n// 输出reducer返回undefined时的错误信息\nfunction getUndefinedStateErrorMessage(key, action) {\n  const actionType = action && action.type\n  const actionDescription =\n    (actionType && `action \"${String(actionType)}\"`) || 'an action'\n\n  return (\n    `Given ${actionDescription}, reducer \"${key}\" returned undefined. ` +\n    `To ignore an action, you must explicitly return the previous state. ` +\n    `If you want this reducer to hold no value, you can return null instead of undefined.`\n  )\n}\n\n// 执行新的reducer过程中的一些警告\nfunction getUnexpectedStateShapeWarningMessage(\n  inputState,\n  reducers,\n  action,\n  unexpectedKeyCache\n) {\n  const reducerKeys = Object.keys(reducers)\n  // 因为组合后的新reducer有state的缺省值,所以如果`INIT`action\n  // 的state有问题,那么肯定是传了preloadedState的,因为如果不传,\n  // 新reducer的state缺省值是{}是没有问题的\n  const argumentName =\n    action && action.type === ActionTypes.INIT\n      ? 'preloadedState argument passed to createStore'\n      : 'previous state received by the reducer'\n\n  // 生成的新reducer用的reducers没有合法的\n  if (reducerKeys.length === 0) {\n    return (\n      'Store does not have a valid reducer. Make sure the argument passed ' +\n      'to combineReducers is an object whose values are reducers.'\n    )\n  }\n\n  // 输入的state是否是基本对象\n  if (!isPlainObject(inputState)) {\n    return (\n      `The ${argumentName} has unexpected type of \"` +\n      {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] +\n      `\". Expected argument to be an object with the following ` +\n      `keys: \"${reducerKeys.join('\", \"')}\"`\n    )\n  }\n\n  // 检测state中是否存在与reducer不匹配的key\n  // 并将其置入缓存\n  const unexpectedKeys = Object.keys(inputState).filter(\n    key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]\n  )\n\n  unexpectedKeys.forEach(key => {\n    unexpectedKeyCache[key] = true\n  })\n\n  if (action && action.type === ActionTypes.REPLACE) return\n\n  if (unexpectedKeys.length > 0) {\n    return (\n      `Unexpected ${unexpectedKeys.length > 1 ? 'keys' : 'key'} ` +\n      `\"${unexpectedKeys.join('\", \"')}\" found in ${argumentName}. ` +\n      `Expected to find one of the known reducer keys instead: ` +\n      `\"${reducerKeys.join('\", \"')}\". Unexpected keys will be ignored.`\n    )\n  }\n}\n\n// 确定reducers是否是合法的\nfunction assertReducerShape(reducers) {\n  // 遍历reducers\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key]\n    // 执行`INIT`action的返回值\n    // 若是undefined就抛出错误\n    // 这里就如上文提到的\n    // 1. 需要有state的缺省值\n    // 2. 需要在actiontype匹配不到时,返回上一个state(若为undefined则返回缺省值)\n    // !!! 这里看到,如果使用combineReducers的话,\n    // 因为在检测是传入的state参数是undefined,\n    // 所以不论有没有perloadedState, reducer都要遵从上边的原则\n    const initialState = reducer(undefined, { type: ActionTypes.INIT })\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined during initialization. ` +\n          `If the state passed to the reducer is undefined, you must ` +\n          `explicitly return the initial state. The initial state may ` +\n          `not be undefined. If you don't want to set a value for this reducer, ` +\n          `you can use null instead of undefined.`\n      )\n    }\n\n    // 防止某些用户,通过处理ActionsTypes.INIT绕过此检测\n    const type =\n      '@@redux/PROBE_UNKNOWN_ACTION_' +\n      Math.random()\n        .toString(36)\n        .substring(7)\n        .split('')\n        .join('.')\n    if (typeof reducer(undefined, { type }) === 'undefined') {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined when probed with a random type. ` +\n          `Don't try to handle ${\n            ActionTypes.INIT\n          } or other actions in \"redux/*\" ` +\n          `namespace. They are considered private. Instead, you must return the ` +\n          `current state for any unknown actions, unless it is undefined, ` +\n          `in which case you must return the initial state, regardless of the ` +\n          `action type. The initial state may not be undefined, but can be null.`\n      )\n    }\n  })\n}\n\n// 将多个不同的reducers合并为一个\nexport default function combineReducers(reducers) {\n  // 获取所有reducers的key\n  const reducerKeys = Object.keys(reducers)\n  // 排除掉非函数的reducers的合集\n  const finalReducers = {}\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n\n    // 不存在对应key的reducer,警告\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(`No reducer provided for key \"${key}\"`)\n      }\n    }\n\n    // 确认是函数的reducer,添加到finalReducers里\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key]\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers)\n\n  let unexpectedKeyCache\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {}\n  }\n\n  // 检测reducers是否合法(触发匹配不到的actionType不会返回undefined)\n  // 如果其中有不和法的reducer,记录错误\n  let shapeAssertionError\n  try {\n    assertReducerShape(finalReducers)\n  } catch (e) {\n    shapeAssertionError = e\n  }\n\n  // 生成新的reducer\n  return function combination(state = {}, action) {\n    // 存在不合法的reducer,直接抛出错误\n    if (shapeAssertionError) {\n      throw shapeAssertionError\n    }\n\n    // 开发环境,提示警告\n    // 1. 检测生成的新reducer用的reducers是否没有可用的\n    // 2. 检测输入的state是否是基本对象\n    // 3. 检测state的key是否有不与reducer对应的\n    if (process.env.NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(\n        state,\n        finalReducers,\n        action,\n        unexpectedKeyCache\n      )\n      if (warningMessage) {\n        warning(warningMessage)\n      }\n    }\n\n    let hasChanged = false\n    const nextState = {}\n    // 这里新的reducer生成的state是用reducer的key划分的state\n    // reducer执行的时候也是改变对应的state[key]\n    // 为匹配到的state[key]不会发生改变!!!默认返回上一个state的重要性\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i]\n      const reducer = finalReducers[key]\n      const previousStateForKey = state[key]\n      const nextStateForKey = reducer(previousStateForKey, action)\n      if (typeof nextStateForKey === 'undefined') {\n        const errorMessage = getUndefinedStateErrorMessage(key, action)\n        throw new Error(errorMessage)\n      }\n      nextState[key] = nextStateForKey\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    return hasChanged ? nextState : state\n  }\n}\n\n```\n\n## bindActionCreators\n> actionCreator: 一个创建 action 的函数\n> bindActionCreator: 把一个 value 为不同 action creator 的对象，转成拥有同名 key 的对象。同时使用 dispatch 对每个 action creator 进行包装，以便可以直接调用它们\n\n```javascript\nfunction bindActionCreator(actionCreator, dispatch) {\n  // 返回一个函数, 我们调用返回的函数时,就会触发dispatch\n  return function() {\n    return dispatch(actionCreator.apply(this, arguments))\n  }\n}\n\nexport default function bindActionCreators(actionCreators, dispatch) {\n  // 如果是一个actionCreator那么直接包装dispatch\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch)\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\n      `bindActionCreators expected an object or a function, instead received ${\n        actionCreators === null ? 'null' : typeof actionCreators\n      }. ` +\n        `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`\n    )\n  }\n\n  // 为每个actionCreator包装dispatch,并用key分割\n  const keys = Object.keys(actionCreators)\n  const boundActionCreators = {}\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)\n    }\n  }\n  return boundActionCreators\n}\n\n```\n## compose\ncompose是函数式编程的一个很重要的工具\n作用是生成一个把作为参数的函数从左到右地依次把执行结果传入下一个函数的新函数\n```javascript\nexport default function compose(...funcs) {\n  // 如果没有参数,那么返回返回原值的函数\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  // 如果只有一个参数,那么直接返回参数\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  // 如果有一个以上的参数,那么递归生成新函数\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n```\n\n## applyMiddleware\n中间件是很重要的一部分,是帮助扩展dispatch的唯一途径\n使用方法createStore(reducers, preloadState, applayMiddleWare(...midlewares))\n同时这一部分用到了函数时编程的思想,所以比较难理解\n> ...middleware (arguments): 遵循 Redux middleware API 的函数。每个 middleware 接受 Store 的 dispatch 和 getState 函数作为命名参数，并返回一个函数。该函数会被传入被称为 next 的下一个 middleware 的 dispatch 方法，并返回一个接收 action 的新函数，这个函数可以直接调用 next(action)，或者在其他需要的时刻调用，甚至根本不去调用它。调用链中最后一个 middleware 会接受真实的 store 的 dispatch 方法作为 next 参数，并借此结束调用链。所以，middleware 的函数签名是 ({ getState, dispatch }) => next => action\n\n```javascript\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        `Dispatching while constructing your middleware is not allowed. ` +\n          `Other middleware would not be applied to this dispatch.`\n      )\n    }\n    let chain = []\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    // 这部分比较难理解,不妨假设有三个中间件,分别是f1, f2, f3\n    // 为了方便c1 = f1(middlewareAPI), c2 = f2(middlewareAPI), c3 = f3(middlewareAPI)\n    // 这里chain = [c1, c2 , c3]\n    chain = middlewares.map(middleware => middleware(middlewareAPI))\n    // 这里comopse\n    // dispatch = c1(c2(c3(store.dispatch)))\n    // 那么就是c3最先执行,以真实的store.dispatch传入,作为next\n    // next => action => {}\n    // 所以返回的是一个action => {}, 这其实是一个新的dispatch\n    // 那么c2接受的next就是c3返回的新的dispatch\n    // 以此类推,c1最后会返回它自己生成的一个dispatch\n    // 所以最后得到的就是一个dispatch\n    dispatch = compose(...chain)(store.dispatch)\n\n    // 最后真正执行dispatch(action)的时候,还是c1的next,c2的next,c3的next这样的顺序执行的,最终执行真正的store.dispatch:\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n```\n","slug":"redux","published":1,"updated":"2019-01-31T05:16:30.449Z","_id":"cjrk5wt8g0000phsbu2aealxw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前几天写完了react-redux的源码解析,接下来看一下redux的源码,继续了解react常用套件的底层原理</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>redux向我们暴露了6个api,分别是:</p>\n<ol>\n<li>createStore</li>\n<li>combineReducers</li>\n<li>bindActionCreators</li>\n<li>applyMiddleware</li>\n<li>compose</li>\n<li><strong>_</strong>DO_NOT_USE_____ActionTypes</li>\n</ol>\n<p>下面就逐个分析这些api的实现:</p>\n<h2 id=\"createStore\"><a href=\"#createStore\" class=\"headerlink\" title=\"createStore\"></a>createStore</h2><p>creteStore无疑是redux的核心实现,应重点关注</p>\n<p>首先createStore接受三个参数:</p>\n<ol>\n<li>reducer: 计算下一个状态树的纯函数</li>\n<li>preloadedState: 初始状态树,由用户定义</li>\n<li>enhancer: 增强函数,可以通过这里新增中间件等功能</li>\n</ol>\n<p>createStore的返回值是一个功能完整的状态容器:</p>\n<ol>\n<li>state状态树</li>\n<li>getState: 阅读状态的方法</li>\n<li>dispatch: (唯一)改变状态的方法</li>\n<li>subscription: 订阅状态改变的方法</li>\n</ol>\n<p>下面看源码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理没有初始状态,第二个参数传入enhancer的情况</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    enhancer = preloadedState</span><br><span class=\"line\">    preloadedState = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 若enhancer是函数则调用并作为返回值返回调用结果</span></span><br><span class=\"line\">  <span class=\"comment\">// 非函数则抛出错误</span></span><br><span class=\"line\">  <span class=\"comment\">// tip: 这里暂时先考虑没有enhancer的情况</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the enhancer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// reducer非函数抛出错误</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the reducer to be a function.'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentReducer = reducer</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentState = preloadedState</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentListeners = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextListeners = currentListeners</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ensureCanMutateNextListeners</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextListeners === currentListeners) &#123;</span><br><span class=\"line\">      nextListeners = currentListeners.slice()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 读取状态树</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果正在dispatch:</span></span><br><span class=\"line\">  <span class=\"comment\">// 那么不可以获取,并抛出错误</span></span><br><span class=\"line\">  <span class=\"comment\">// 不能保证此时状态是“你想要的”那个状态,因为状态正在改变</span></span><br><span class=\"line\">  <span class=\"comment\">// 为确保取到的状态正确可以从最后一个reducer传入的位置取</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not call store.getState() while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'The reducer has already received the state as an argument. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Pass it down from the top reducer instead of reading it from the store.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentState</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 注册订阅</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里本来有很大一段注释,大致意思是说:</span></span><br><span class=\"line\">  <span class=\"comment\">// 每次dispatch后触发的订阅是dispatch前保存的快照,</span></span><br><span class=\"line\">  <span class=\"comment\">// 在本次dispatch途中或者之后注册的订阅不会被本次dispatch触发</span></span><br><span class=\"line\">  <span class=\"comment\">// tip: 1.注意快照的实现,2.注意对reducer执行中的控制</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">listener</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// listener不是函数:你没有资格订阅!</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listener !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the listener to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在reducer执行是无法注册订阅</span></span><br><span class=\"line\">    <span class=\"comment\">// 想看本次dispatch的结果请getState</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not call store.subscribe() while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'If you would like to be notified after the store has been updated, subscribe from a '</span> +</span><br><span class=\"line\">          <span class=\"string\">'component and invoke store.getState() in the callback to access the latest state. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'See http://redux.js.org/docs/api/Store.html#subscribe for more details.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 闭包保存是否已订阅的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 确保nextListener和currentListener不是指向同一个数组</span></span><br><span class=\"line\">    <span class=\"comment\">// 以通过currenListener保留快照</span></span><br><span class=\"line\">    ensureCanMutateNextListeners()</span><br><span class=\"line\">    <span class=\"comment\">// 注册订阅成功!!!</span></span><br><span class=\"line\">    nextListeners.push(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注册订阅的返回值是一个注销订阅的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unsubscribe</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 未订阅就不需要注销订阅了,直接返回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isSubscribed) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 还是老问题,reducer执行中无法注销订阅</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">          <span class=\"string\">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class=\"line\">            <span class=\"string\">'See http://redux.js.org/docs/api/Store.html#subscribe for more details.'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 置是否已订阅状态为false</span></span><br><span class=\"line\">      isSubscribed = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 保留快照</span></span><br><span class=\"line\">      ensureCanMutateNextListeners()</span><br><span class=\"line\">      <span class=\"comment\">// 从订阅列表中删除本订阅</span></span><br><span class=\"line\">      <span class=\"comment\">// 注销成功!!!</span></span><br><span class=\"line\">      onst index = nextListeners.indexOf(listener)</span><br><span class=\"line\">      nextListeners.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 触发action</span></span><br><span class=\"line\">  <span class=\"comment\">// 通过reducer和当前状态树计算并返回下一个状态树</span></span><br><span class=\"line\">  <span class=\"comment\">// 通知监听</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 原生dispatch只支持普通对象作为action</span></span><br><span class=\"line\">    <span class=\"comment\">// plainobject 是指字面量或者new Object()创建的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPlainObject(action)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions must be plain objects. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Use custom middleware for async actions.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// action必须有type</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> action.type === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions may not have an undefined \"type\" property. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Have you misspelled a constant?'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 还是老问题,正在执行reducer当然不能执行另一个dispatch了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Reducers may not dispatch actions.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行reducer,然后更新currentState</span></span><br><span class=\"line\">    <span class=\"comment\">// 终于看到掌控一切的isDispatching状态了,...也很简单=.=</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">true</span></span><br><span class=\"line\">      currentState = currentReducer(currentState, action)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取最新的订阅列表快照,并通知它们状态改变</span></span><br><span class=\"line\">    <span class=\"comment\">// 看到这里感觉说订阅列表的快照是保存在本次dispatch完成且通知订阅前时比较合适?</span></span><br><span class=\"line\">    <span class=\"comment\">// 实际上和dispatch前是一样的,因为在dispatch时无法继续注册或注销订阅,那么dispatch</span></span><br><span class=\"line\">    <span class=\"comment\">// 前的快照就是当前位置的快照</span></span><br><span class=\"line\">    <span class=\"comment\">// 要理解订阅列表快照的作用是保证在\"通知订阅状态改变\"时本次使用的订阅列表不变</span></span><br><span class=\"line\">    <span class=\"comment\">// 而执行dispatch时的订阅列表不变是由isDispatching变量控制的</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> listeners = (currentListeners = nextListeners)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listener = listeners[i]</span><br><span class=\"line\">      listener()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回值是本次执行的action</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> action</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用于动态修改reducer, 实现方法是替换reducer后触发内置`REPLACE`action</span></span><br><span class=\"line\">  <span class=\"comment\">// `REPLACE`的key是一个随机字符串防止用户“误触”</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceReducer</span>(<span class=\"params\">nextReducer</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextReducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the nextReducer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    currentReducer = nextReducer</span><br><span class=\"line\">    dispatch(&#123; <span class=\"attr\">type</span>: ActionTypes.REPLACE &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 为observable/reactive库预留的交互接口</span></span><br><span class=\"line\">  <span class=\"comment\">// 需要看了observable等库的原理才能解析,不过不影响大局,跳过</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> outerSubscribe = subscribe</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      subscribe(observer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> observer !== <span class=\"string\">'object'</span> || observer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Expected the observer to be an object.'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observeState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (observer.next) &#123;</span><br><span class=\"line\">            observer.next(getState())</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        observeState()</span><br><span class=\"line\">        <span class=\"keyword\">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; unsubscribe &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      [$$observable]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建状态树时会先执行内置`INIT`action</span></span><br><span class=\"line\">  <span class=\"comment\">// 目的是在没有提供preloadedState时创建一个空树</span></span><br><span class=\"line\">  <span class=\"comment\">// 注意:因为`INIT`这个action实际不存在,所以返回的是reducer里的默认返回值</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果reducer里没有默认返回值,那么state将是undefined</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以所有reducer都必须默认在匹配不到type时返回上一个state,</span></span><br><span class=\"line\">  <span class=\"comment\">// 并且没有perloadedState时,需为state设定缺省值</span></span><br><span class=\"line\">  dispatch(&#123; <span class=\"attr\">type</span>: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 都给你们用!</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    subscribe,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">    replaceReducer,</span><br><span class=\"line\">    [$$observable]: observable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"combineReducers\"><a href=\"#combineReducers\" class=\"headerlink\" title=\"combineReducers\"></a>combineReducers</h2><p>将多个reducers组合成一个的工具</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出reducer返回undefined时的错误信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUndefinedStateErrorMessage</span>(<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actionType = action &amp;&amp; action.type</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actionDescription =</span><br><span class=\"line\">    (actionType &amp;&amp; <span class=\"string\">`action \"<span class=\"subst\">$&#123;<span class=\"built_in\">String</span>(actionType)&#125;</span>\"`</span>) || <span class=\"string\">'an action'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">`Given <span class=\"subst\">$&#123;actionDescription&#125;</span>, reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined. `</span> +</span><br><span class=\"line\">    <span class=\"string\">`To ignore an action, you must explicitly return the previous state. `</span> +</span><br><span class=\"line\">    <span class=\"string\">`If you want this reducer to hold no value, you can return null instead of undefined.`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行新的reducer过程中的一些警告</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUnexpectedStateShapeWarningMessage</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  inputState,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  reducers,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  action,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  unexpectedKeyCache</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"comment\">// 因为组合后的新reducer有state的缺省值,所以如果`INIT`action</span></span><br><span class=\"line\">  <span class=\"comment\">// 的state有问题,那么肯定是传了preloadedState的,因为如果不传,</span></span><br><span class=\"line\">  <span class=\"comment\">// 新reducer的state缺省值是&#123;&#125;是没有问题的</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> argumentName =</span><br><span class=\"line\">    action &amp;&amp; action.type === ActionTypes.INIT</span><br><span class=\"line\">      ? <span class=\"string\">'preloadedState argument passed to createStore'</span></span><br><span class=\"line\">      : <span class=\"string\">'previous state received by the reducer'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 生成的新reducer用的reducers没有合法的</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (reducerKeys.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">'Store does not have a valid reducer. Make sure the argument passed '</span> +</span><br><span class=\"line\">      <span class=\"string\">'to combineReducers is an object whose values are reducers.'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 输入的state是否是基本对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isPlainObject(inputState)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">`The <span class=\"subst\">$&#123;argumentName&#125;</span> has unexpected type of \"`</span> +</span><br><span class=\"line\">      &#123;&#125;.toString.call(inputState).match(<span class=\"regexp\">/\\s([a-z|A-Z]+)/</span>)[<span class=\"number\">1</span>] +</span><br><span class=\"line\">      <span class=\"string\">`\". Expected argument to be an object with the following `</span> +</span><br><span class=\"line\">      <span class=\"string\">`keys: \"<span class=\"subst\">$&#123;reducerKeys.join(<span class=\"string\">'\", \"'</span>)&#125;</span>\"`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检测state中是否存在与reducer不匹配的key</span></span><br><span class=\"line\">  <span class=\"comment\">// 并将其置入缓存</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> unexpectedKeys = <span class=\"built_in\">Object</span>.keys(inputState).filter(</span><br><span class=\"line\">    key =&gt; !reducers.hasOwnProperty(key) &amp;&amp; !unexpectedKeyCache[key]</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  unexpectedKeys.forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    unexpectedKeyCache[key] = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action &amp;&amp; action.type === ActionTypes.REPLACE) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (unexpectedKeys.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">`Unexpected <span class=\"subst\">$&#123;unexpectedKeys.length &gt; <span class=\"number\">1</span> ? <span class=\"string\">'keys'</span> : <span class=\"string\">'key'</span>&#125;</span> `</span> +</span><br><span class=\"line\">      <span class=\"string\">`\"<span class=\"subst\">$&#123;unexpectedKeys.join(<span class=\"string\">'\", \"'</span>)&#125;</span>\" found in <span class=\"subst\">$&#123;argumentName&#125;</span>. `</span> +</span><br><span class=\"line\">      <span class=\"string\">`Expected to find one of the known reducer keys instead: `</span> +</span><br><span class=\"line\">      <span class=\"string\">`\"<span class=\"subst\">$&#123;reducerKeys.join(<span class=\"string\">'\", \"'</span>)&#125;</span>\". Unexpected keys will be ignored.`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 确定reducers是否是合法的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertReducerShape</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历reducers</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(reducers).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reducer = reducers[key]</span><br><span class=\"line\">    <span class=\"comment\">// 执行`INIT`action的返回值</span></span><br><span class=\"line\">    <span class=\"comment\">// 若是undefined就抛出错误</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里就如上文提到的</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 需要有state的缺省值</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 需要在actiontype匹配不到时,返回上一个state(若为undefined则返回缺省值)</span></span><br><span class=\"line\">    <span class=\"comment\">// !!! 这里看到,如果使用combineReducers的话,</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为在检测是传入的state参数是undefined,</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以不论有没有perloadedState, reducer都要遵从上边的原则</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> initialState = reducer(<span class=\"literal\">undefined</span>, &#123; <span class=\"attr\">type</span>: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> initialState === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined during initialization. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`If the state passed to the reducer is undefined, you must `</span> +</span><br><span class=\"line\">          <span class=\"string\">`explicitly return the initial state. The initial state may `</span> +</span><br><span class=\"line\">          <span class=\"string\">`not be undefined. If you don't want to set a value for this reducer, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`you can use null instead of undefined.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 防止某些用户,通过处理ActionsTypes.INIT绕过此检测</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> type =</span><br><span class=\"line\">      <span class=\"string\">'@@redux/PROBE_UNKNOWN_ACTION_'</span> +</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">        .toString(<span class=\"number\">36</span>)</span><br><span class=\"line\">        .substring(<span class=\"number\">7</span>)</span><br><span class=\"line\">        .split(<span class=\"string\">''</span>)</span><br><span class=\"line\">        .join(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducer(<span class=\"literal\">undefined</span>, &#123; type &#125;) === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined when probed with a random type. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Don't try to handle <span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">            ActionTypes.INIT</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          &#125;</span> or other actions in \"redux/*\" `</span> +</span><br><span class=\"line\">          <span class=\"string\">`namespace. They are considered private. Instead, you must return the `</span> +</span><br><span class=\"line\">          <span class=\"string\">`current state for any unknown actions, unless it is undefined, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`in which case you must return the initial state, regardless of the `</span> +</span><br><span class=\"line\">          <span class=\"string\">`action type. The initial state may not be undefined, but can be null.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将多个不同的reducers合并为一个</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combineReducers</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取所有reducers的key</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"comment\">// 排除掉非函数的reducers的合集</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducers = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = reducerKeys[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不存在对应key的reducer,警告</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        warning(<span class=\"string\">`No reducer provided for key \"<span class=\"subst\">$&#123;key&#125;</span>\"`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 确认是函数的reducer,添加到finalReducers里</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      finalReducers[key] = reducers[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducerKeys = <span class=\"built_in\">Object</span>.keys(finalReducers)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> unexpectedKeyCache</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">    unexpectedKeyCache = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检测reducers是否合法(触发匹配不到的actionType不会返回undefined)</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果其中有不和法的reducer,记录错误</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> shapeAssertionError</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    assertReducerShape(finalReducers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    shapeAssertionError = e</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 生成新的reducer</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combination</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存在不合法的reducer,直接抛出错误</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shapeAssertionError) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> shapeAssertionError</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开发环境,提示警告</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 检测生成的新reducer用的reducers是否没有可用的</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 检测输入的state是否是基本对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. 检测state的key是否有不与reducer对应的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class=\"line\">        state,</span><br><span class=\"line\">        finalReducers,</span><br><span class=\"line\">        action,</span><br><span class=\"line\">        unexpectedKeyCache</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (warningMessage) &#123;</span><br><span class=\"line\">        warning(warningMessage)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasChanged = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextState = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这里新的reducer生成的state是用reducer的key划分的state</span></span><br><span class=\"line\">    <span class=\"comment\">// reducer执行的时候也是改变对应的state[key]</span></span><br><span class=\"line\">    <span class=\"comment\">// 为匹配到的state[key]不会发生改变!!!默认返回上一个state的重要性</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = finalReducerKeys[i]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> reducer = finalReducers[key]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> previousStateForKey = state[key]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextStateForKey === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> errorMessage = getUndefinedStateErrorMessage(key, action)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(errorMessage)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      nextState[key] = nextStateForKey</span><br><span class=\"line\">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasChanged ? nextState : state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"bindActionCreators\"><a href=\"#bindActionCreators\" class=\"headerlink\" title=\"bindActionCreators\"></a>bindActionCreators</h2><blockquote>\n<p>actionCreator: 一个创建 action 的函数<br>bindActionCreator: 把一个 value 为不同 action creator 的对象，转成拥有同名 key 的对象。同时使用 dispatch 对每个 action creator 进行包装，以便可以直接调用它们</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindActionCreator</span>(<span class=\"params\">actionCreator, dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个函数, 我们调用返回的函数时,就会触发dispatch</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatch(actionCreator.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindActionCreators</span>(<span class=\"params\">actionCreators, dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果是一个actionCreator那么直接包装dispatch</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bindActionCreator(actionCreators, dispatch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators !== <span class=\"string\">'object'</span> || actionCreators === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">`bindActionCreators expected an object or a function, instead received <span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        actionCreators === <span class=\"literal\">null</span> ? <span class=\"string\">'null'</span> : <span class=\"keyword\">typeof</span> actionCreators</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">      &#125;</span>. `</span> +</span><br><span class=\"line\">        <span class=\"string\">`Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 为每个actionCreator包装dispatch,并用key分割</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(actionCreators)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> boundActionCreators = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> actionCreator = actionCreators[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreator === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> boundActionCreators</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a>compose</h2><p>compose是函数式编程的一个很重要的工具<br>作用是生成一个把作为参数的函数从左到右地依次把执行结果传入下一个函数的新函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">...funcs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果没有参数,那么返回返回原值的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果只有一个参数,那么直接返回参数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果有一个以上的参数,那么递归生成新函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> (...args) =&gt; a(b(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"applyMiddleware\"><a href=\"#applyMiddleware\" class=\"headerlink\" title=\"applyMiddleware\"></a>applyMiddleware</h2><p>中间件是很重要的一部分,是帮助扩展dispatch的唯一途径<br>使用方法createStore(reducers, preloadState, applayMiddleWare(…midlewares))<br>同时这一部分用到了函数时编程的思想,所以比较难理解</p>\n<blockquote>\n<p>…middleware (arguments): 遵循 Redux middleware API 的函数。每个 middleware 接受 Store 的 dispatch 和 getState 函数作为命名参数，并返回一个函数。该函数会被传入被称为 next 的下一个 middleware 的 dispatch 方法，并返回一个接收 action 的新函数，这个函数可以直接调用 next(action)，或者在其他需要的时刻调用，甚至根本不去调用它。调用链中最后一个 middleware 会接受真实的 store 的 dispatch 方法作为 next 参数，并借此结束调用链。所以，middleware 的函数签名是 ({ getState, dispatch }) =&gt; next =&gt; action</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">createStore</span> =&gt;</span> (...args) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = createStore(...args)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dispatch = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Other middleware would not be applied to this dispatch.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> chain = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这部分比较难理解,不妨假设有三个中间件,分别是f1, f2, f3</span></span><br><span class=\"line\">    <span class=\"comment\">// 为了方便c1 = f1(middlewareAPI), c2 = f2(middlewareAPI), c3 = f3(middlewareAPI)</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里chain = [c1, c2 , c3]</span></span><br><span class=\"line\">    chain = middlewares.map(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class=\"line\">    <span class=\"comment\">// 这里comopse</span></span><br><span class=\"line\">    <span class=\"comment\">// dispatch = c1(c2(c3(store.dispatch)))</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么就是c3最先执行,以真实的store.dispatch传入,作为next</span></span><br><span class=\"line\">    <span class=\"comment\">// next =&gt; action =&gt; &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以返回的是一个action =&gt; &#123;&#125;, 这其实是一个新的dispatch</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么c2接受的next就是c3返回的新的dispatch</span></span><br><span class=\"line\">    <span class=\"comment\">// 以此类推,c1最后会返回它自己生成的一个dispatch</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以最后得到的就是一个dispatch</span></span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 最后真正执行dispatch(action)的时候,还是c1的next,c2的next,c3的next这样的顺序执行的,最终执行真正的store.dispatch:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>前几天写完了react-redux的源码解析,接下来看一下redux的源码,继续了解react常用套件的底层原理</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>redux向我们暴露了6个api,分别是:</p>\n<ol>\n<li>createStore</li>\n<li>combineReducers</li>\n<li>bindActionCreators</li>\n<li>applyMiddleware</li>\n<li>compose</li>\n<li><strong>_</strong>DO_NOT_USE_____ActionTypes</li>\n</ol>\n<p>下面就逐个分析这些api的实现:</p>\n<h2 id=\"createStore\"><a href=\"#createStore\" class=\"headerlink\" title=\"createStore\"></a>createStore</h2><p>creteStore无疑是redux的核心实现,应重点关注</p>\n<p>首先createStore接受三个参数:</p>\n<ol>\n<li>reducer: 计算下一个状态树的纯函数</li>\n<li>preloadedState: 初始状态树,由用户定义</li>\n<li>enhancer: 增强函数,可以通过这里新增中间件等功能</li>\n</ol>\n<p>createStore的返回值是一个功能完整的状态容器:</p>\n<ol>\n<li>state状态树</li>\n<li>getState: 阅读状态的方法</li>\n<li>dispatch: (唯一)改变状态的方法</li>\n<li>subscription: 订阅状态改变的方法</li>\n</ol>\n<p>下面看源码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理没有初始状态,第二个参数传入enhancer的情况</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    enhancer = preloadedState</span><br><span class=\"line\">    preloadedState = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 若enhancer是函数则调用并作为返回值返回调用结果</span></span><br><span class=\"line\">  <span class=\"comment\">// 非函数则抛出错误</span></span><br><span class=\"line\">  <span class=\"comment\">// tip: 这里暂时先考虑没有enhancer的情况</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the enhancer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// reducer非函数抛出错误</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the reducer to be a function.'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentReducer = reducer</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentState = preloadedState</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentListeners = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextListeners = currentListeners</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ensureCanMutateNextListeners</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextListeners === currentListeners) &#123;</span><br><span class=\"line\">      nextListeners = currentListeners.slice()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 读取状态树</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果正在dispatch:</span></span><br><span class=\"line\">  <span class=\"comment\">// 那么不可以获取,并抛出错误</span></span><br><span class=\"line\">  <span class=\"comment\">// 不能保证此时状态是“你想要的”那个状态,因为状态正在改变</span></span><br><span class=\"line\">  <span class=\"comment\">// 为确保取到的状态正确可以从最后一个reducer传入的位置取</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not call store.getState() while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'The reducer has already received the state as an argument. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Pass it down from the top reducer instead of reading it from the store.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentState</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 注册订阅</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里本来有很大一段注释,大致意思是说:</span></span><br><span class=\"line\">  <span class=\"comment\">// 每次dispatch后触发的订阅是dispatch前保存的快照,</span></span><br><span class=\"line\">  <span class=\"comment\">// 在本次dispatch途中或者之后注册的订阅不会被本次dispatch触发</span></span><br><span class=\"line\">  <span class=\"comment\">// tip: 1.注意快照的实现,2.注意对reducer执行中的控制</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">listener</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// listener不是函数:你没有资格订阅!</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listener !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the listener to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在reducer执行是无法注册订阅</span></span><br><span class=\"line\">    <span class=\"comment\">// 想看本次dispatch的结果请getState</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not call store.subscribe() while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'If you would like to be notified after the store has been updated, subscribe from a '</span> +</span><br><span class=\"line\">          <span class=\"string\">'component and invoke store.getState() in the callback to access the latest state. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'See http://redux.js.org/docs/api/Store.html#subscribe for more details.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 闭包保存是否已订阅的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 确保nextListener和currentListener不是指向同一个数组</span></span><br><span class=\"line\">    <span class=\"comment\">// 以通过currenListener保留快照</span></span><br><span class=\"line\">    ensureCanMutateNextListeners()</span><br><span class=\"line\">    <span class=\"comment\">// 注册订阅成功!!!</span></span><br><span class=\"line\">    nextListeners.push(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注册订阅的返回值是一个注销订阅的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unsubscribe</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 未订阅就不需要注销订阅了,直接返回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isSubscribed) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 还是老问题,reducer执行中无法注销订阅</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">          <span class=\"string\">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class=\"line\">            <span class=\"string\">'See http://redux.js.org/docs/api/Store.html#subscribe for more details.'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 置是否已订阅状态为false</span></span><br><span class=\"line\">      isSubscribed = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 保留快照</span></span><br><span class=\"line\">      ensureCanMutateNextListeners()</span><br><span class=\"line\">      <span class=\"comment\">// 从订阅列表中删除本订阅</span></span><br><span class=\"line\">      <span class=\"comment\">// 注销成功!!!</span></span><br><span class=\"line\">      onst index = nextListeners.indexOf(listener)</span><br><span class=\"line\">      nextListeners.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 触发action</span></span><br><span class=\"line\">  <span class=\"comment\">// 通过reducer和当前状态树计算并返回下一个状态树</span></span><br><span class=\"line\">  <span class=\"comment\">// 通知监听</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 原生dispatch只支持普通对象作为action</span></span><br><span class=\"line\">    <span class=\"comment\">// plainobject 是指字面量或者new Object()创建的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPlainObject(action)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions must be plain objects. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Use custom middleware for async actions.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// action必须有type</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> action.type === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions may not have an undefined \"type\" property. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Have you misspelled a constant?'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 还是老问题,正在执行reducer当然不能执行另一个dispatch了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Reducers may not dispatch actions.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行reducer,然后更新currentState</span></span><br><span class=\"line\">    <span class=\"comment\">// 终于看到掌控一切的isDispatching状态了,...也很简单=.=</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">true</span></span><br><span class=\"line\">      currentState = currentReducer(currentState, action)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取最新的订阅列表快照,并通知它们状态改变</span></span><br><span class=\"line\">    <span class=\"comment\">// 看到这里感觉说订阅列表的快照是保存在本次dispatch完成且通知订阅前时比较合适?</span></span><br><span class=\"line\">    <span class=\"comment\">// 实际上和dispatch前是一样的,因为在dispatch时无法继续注册或注销订阅,那么dispatch</span></span><br><span class=\"line\">    <span class=\"comment\">// 前的快照就是当前位置的快照</span></span><br><span class=\"line\">    <span class=\"comment\">// 要理解订阅列表快照的作用是保证在\"通知订阅状态改变\"时本次使用的订阅列表不变</span></span><br><span class=\"line\">    <span class=\"comment\">// 而执行dispatch时的订阅列表不变是由isDispatching变量控制的</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> listeners = (currentListeners = nextListeners)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listener = listeners[i]</span><br><span class=\"line\">      listener()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回值是本次执行的action</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> action</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用于动态修改reducer, 实现方法是替换reducer后触发内置`REPLACE`action</span></span><br><span class=\"line\">  <span class=\"comment\">// `REPLACE`的key是一个随机字符串防止用户“误触”</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceReducer</span>(<span class=\"params\">nextReducer</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextReducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the nextReducer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    currentReducer = nextReducer</span><br><span class=\"line\">    dispatch(&#123; <span class=\"attr\">type</span>: ActionTypes.REPLACE &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 为observable/reactive库预留的交互接口</span></span><br><span class=\"line\">  <span class=\"comment\">// 需要看了observable等库的原理才能解析,不过不影响大局,跳过</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> outerSubscribe = subscribe</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      subscribe(observer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> observer !== <span class=\"string\">'object'</span> || observer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Expected the observer to be an object.'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observeState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (observer.next) &#123;</span><br><span class=\"line\">            observer.next(getState())</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        observeState()</span><br><span class=\"line\">        <span class=\"keyword\">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; unsubscribe &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      [$$observable]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建状态树时会先执行内置`INIT`action</span></span><br><span class=\"line\">  <span class=\"comment\">// 目的是在没有提供preloadedState时创建一个空树</span></span><br><span class=\"line\">  <span class=\"comment\">// 注意:因为`INIT`这个action实际不存在,所以返回的是reducer里的默认返回值</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果reducer里没有默认返回值,那么state将是undefined</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以所有reducer都必须默认在匹配不到type时返回上一个state,</span></span><br><span class=\"line\">  <span class=\"comment\">// 并且没有perloadedState时,需为state设定缺省值</span></span><br><span class=\"line\">  dispatch(&#123; <span class=\"attr\">type</span>: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 都给你们用!</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    subscribe,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">    replaceReducer,</span><br><span class=\"line\">    [$$observable]: observable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"combineReducers\"><a href=\"#combineReducers\" class=\"headerlink\" title=\"combineReducers\"></a>combineReducers</h2><p>将多个reducers组合成一个的工具</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出reducer返回undefined时的错误信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUndefinedStateErrorMessage</span>(<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actionType = action &amp;&amp; action.type</span><br><span class=\"line\">  <span class=\"keyword\">const</span> actionDescription =</span><br><span class=\"line\">    (actionType &amp;&amp; <span class=\"string\">`action \"<span class=\"subst\">$&#123;<span class=\"built_in\">String</span>(actionType)&#125;</span>\"`</span>) || <span class=\"string\">'an action'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">`Given <span class=\"subst\">$&#123;actionDescription&#125;</span>, reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined. `</span> +</span><br><span class=\"line\">    <span class=\"string\">`To ignore an action, you must explicitly return the previous state. `</span> +</span><br><span class=\"line\">    <span class=\"string\">`If you want this reducer to hold no value, you can return null instead of undefined.`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行新的reducer过程中的一些警告</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUnexpectedStateShapeWarningMessage</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  inputState,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  reducers,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  action,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  unexpectedKeyCache</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"comment\">// 因为组合后的新reducer有state的缺省值,所以如果`INIT`action</span></span><br><span class=\"line\">  <span class=\"comment\">// 的state有问题,那么肯定是传了preloadedState的,因为如果不传,</span></span><br><span class=\"line\">  <span class=\"comment\">// 新reducer的state缺省值是&#123;&#125;是没有问题的</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> argumentName =</span><br><span class=\"line\">    action &amp;&amp; action.type === ActionTypes.INIT</span><br><span class=\"line\">      ? <span class=\"string\">'preloadedState argument passed to createStore'</span></span><br><span class=\"line\">      : <span class=\"string\">'previous state received by the reducer'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 生成的新reducer用的reducers没有合法的</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (reducerKeys.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">'Store does not have a valid reducer. Make sure the argument passed '</span> +</span><br><span class=\"line\">      <span class=\"string\">'to combineReducers is an object whose values are reducers.'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 输入的state是否是基本对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isPlainObject(inputState)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">`The <span class=\"subst\">$&#123;argumentName&#125;</span> has unexpected type of \"`</span> +</span><br><span class=\"line\">      &#123;&#125;.toString.call(inputState).match(<span class=\"regexp\">/\\s([a-z|A-Z]+)/</span>)[<span class=\"number\">1</span>] +</span><br><span class=\"line\">      <span class=\"string\">`\". Expected argument to be an object with the following `</span> +</span><br><span class=\"line\">      <span class=\"string\">`keys: \"<span class=\"subst\">$&#123;reducerKeys.join(<span class=\"string\">'\", \"'</span>)&#125;</span>\"`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检测state中是否存在与reducer不匹配的key</span></span><br><span class=\"line\">  <span class=\"comment\">// 并将其置入缓存</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> unexpectedKeys = <span class=\"built_in\">Object</span>.keys(inputState).filter(</span><br><span class=\"line\">    key =&gt; !reducers.hasOwnProperty(key) &amp;&amp; !unexpectedKeyCache[key]</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  unexpectedKeys.forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    unexpectedKeyCache[key] = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action &amp;&amp; action.type === ActionTypes.REPLACE) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (unexpectedKeys.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">`Unexpected <span class=\"subst\">$&#123;unexpectedKeys.length &gt; <span class=\"number\">1</span> ? <span class=\"string\">'keys'</span> : <span class=\"string\">'key'</span>&#125;</span> `</span> +</span><br><span class=\"line\">      <span class=\"string\">`\"<span class=\"subst\">$&#123;unexpectedKeys.join(<span class=\"string\">'\", \"'</span>)&#125;</span>\" found in <span class=\"subst\">$&#123;argumentName&#125;</span>. `</span> +</span><br><span class=\"line\">      <span class=\"string\">`Expected to find one of the known reducer keys instead: `</span> +</span><br><span class=\"line\">      <span class=\"string\">`\"<span class=\"subst\">$&#123;reducerKeys.join(<span class=\"string\">'\", \"'</span>)&#125;</span>\". Unexpected keys will be ignored.`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 确定reducers是否是合法的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assertReducerShape</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历reducers</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(reducers).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reducer = reducers[key]</span><br><span class=\"line\">    <span class=\"comment\">// 执行`INIT`action的返回值</span></span><br><span class=\"line\">    <span class=\"comment\">// 若是undefined就抛出错误</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里就如上文提到的</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 需要有state的缺省值</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 需要在actiontype匹配不到时,返回上一个state(若为undefined则返回缺省值)</span></span><br><span class=\"line\">    <span class=\"comment\">// !!! 这里看到,如果使用combineReducers的话,</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为在检测是传入的state参数是undefined,</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以不论有没有perloadedState, reducer都要遵从上边的原则</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> initialState = reducer(<span class=\"literal\">undefined</span>, &#123; <span class=\"attr\">type</span>: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> initialState === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined during initialization. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`If the state passed to the reducer is undefined, you must `</span> +</span><br><span class=\"line\">          <span class=\"string\">`explicitly return the initial state. The initial state may `</span> +</span><br><span class=\"line\">          <span class=\"string\">`not be undefined. If you don't want to set a value for this reducer, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`you can use null instead of undefined.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 防止某些用户,通过处理ActionsTypes.INIT绕过此检测</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> type =</span><br><span class=\"line\">      <span class=\"string\">'@@redux/PROBE_UNKNOWN_ACTION_'</span> +</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">        .toString(<span class=\"number\">36</span>)</span><br><span class=\"line\">        .substring(<span class=\"number\">7</span>)</span><br><span class=\"line\">        .split(<span class=\"string\">''</span>)</span><br><span class=\"line\">        .join(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducer(<span class=\"literal\">undefined</span>, &#123; type &#125;) === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Reducer \"<span class=\"subst\">$&#123;key&#125;</span>\" returned undefined when probed with a random type. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Don't try to handle <span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">            ActionTypes.INIT</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          &#125;</span> or other actions in \"redux/*\" `</span> +</span><br><span class=\"line\">          <span class=\"string\">`namespace. They are considered private. Instead, you must return the `</span> +</span><br><span class=\"line\">          <span class=\"string\">`current state for any unknown actions, unless it is undefined, `</span> +</span><br><span class=\"line\">          <span class=\"string\">`in which case you must return the initial state, regardless of the `</span> +</span><br><span class=\"line\">          <span class=\"string\">`action type. The initial state may not be undefined, but can be null.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将多个不同的reducers合并为一个</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combineReducers</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取所有reducers的key</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"comment\">// 排除掉非函数的reducers的合集</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducers = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = reducerKeys[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不存在对应key的reducer,警告</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        warning(<span class=\"string\">`No reducer provided for key \"<span class=\"subst\">$&#123;key&#125;</span>\"`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 确认是函数的reducer,添加到finalReducers里</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      finalReducers[key] = reducers[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducerKeys = <span class=\"built_in\">Object</span>.keys(finalReducers)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> unexpectedKeyCache</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">    unexpectedKeyCache = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检测reducers是否合法(触发匹配不到的actionType不会返回undefined)</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果其中有不和法的reducer,记录错误</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> shapeAssertionError</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    assertReducerShape(finalReducers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    shapeAssertionError = e</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 生成新的reducer</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combination</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存在不合法的reducer,直接抛出错误</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shapeAssertionError) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> shapeAssertionError</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开发环境,提示警告</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 检测生成的新reducer用的reducers是否没有可用的</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 检测输入的state是否是基本对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. 检测state的key是否有不与reducer对应的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class=\"line\">        state,</span><br><span class=\"line\">        finalReducers,</span><br><span class=\"line\">        action,</span><br><span class=\"line\">        unexpectedKeyCache</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (warningMessage) &#123;</span><br><span class=\"line\">        warning(warningMessage)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasChanged = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextState = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这里新的reducer生成的state是用reducer的key划分的state</span></span><br><span class=\"line\">    <span class=\"comment\">// reducer执行的时候也是改变对应的state[key]</span></span><br><span class=\"line\">    <span class=\"comment\">// 为匹配到的state[key]不会发生改变!!!默认返回上一个state的重要性</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = finalReducerKeys[i]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> reducer = finalReducers[key]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> previousStateForKey = state[key]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextStateForKey === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> errorMessage = getUndefinedStateErrorMessage(key, action)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(errorMessage)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      nextState[key] = nextStateForKey</span><br><span class=\"line\">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasChanged ? nextState : state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"bindActionCreators\"><a href=\"#bindActionCreators\" class=\"headerlink\" title=\"bindActionCreators\"></a>bindActionCreators</h2><blockquote>\n<p>actionCreator: 一个创建 action 的函数<br>bindActionCreator: 把一个 value 为不同 action creator 的对象，转成拥有同名 key 的对象。同时使用 dispatch 对每个 action creator 进行包装，以便可以直接调用它们</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindActionCreator</span>(<span class=\"params\">actionCreator, dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个函数, 我们调用返回的函数时,就会触发dispatch</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatch(actionCreator.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindActionCreators</span>(<span class=\"params\">actionCreators, dispatch</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果是一个actionCreator那么直接包装dispatch</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bindActionCreator(actionCreators, dispatch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators !== <span class=\"string\">'object'</span> || actionCreators === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">`bindActionCreators expected an object or a function, instead received <span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        actionCreators === <span class=\"literal\">null</span> ? <span class=\"string\">'null'</span> : <span class=\"keyword\">typeof</span> actionCreators</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">      &#125;</span>. `</span> +</span><br><span class=\"line\">        <span class=\"string\">`Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 为每个actionCreator包装dispatch,并用key分割</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(actionCreators)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> boundActionCreators = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> actionCreator = actionCreators[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreator === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> boundActionCreators</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a>compose</h2><p>compose是函数式编程的一个很重要的工具<br>作用是生成一个把作为参数的函数从左到右地依次把执行结果传入下一个函数的新函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">...funcs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果没有参数,那么返回返回原值的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果只有一个参数,那么直接返回参数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果有一个以上的参数,那么递归生成新函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> (...args) =&gt; a(b(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"applyMiddleware\"><a href=\"#applyMiddleware\" class=\"headerlink\" title=\"applyMiddleware\"></a>applyMiddleware</h2><p>中间件是很重要的一部分,是帮助扩展dispatch的唯一途径<br>使用方法createStore(reducers, preloadState, applayMiddleWare(…midlewares))<br>同时这一部分用到了函数时编程的思想,所以比较难理解</p>\n<blockquote>\n<p>…middleware (arguments): 遵循 Redux middleware API 的函数。每个 middleware 接受 Store 的 dispatch 和 getState 函数作为命名参数，并返回一个函数。该函数会被传入被称为 next 的下一个 middleware 的 dispatch 方法，并返回一个接收 action 的新函数，这个函数可以直接调用 next(action)，或者在其他需要的时刻调用，甚至根本不去调用它。调用链中最后一个 middleware 会接受真实的 store 的 dispatch 方法作为 next 参数，并借此结束调用链。所以，middleware 的函数签名是 ({ getState, dispatch }) =&gt; next =&gt; action</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">createStore</span> =&gt;</span> (...args) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = createStore(...args)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dispatch = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Other middleware would not be applied to this dispatch.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> chain = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这部分比较难理解,不妨假设有三个中间件,分别是f1, f2, f3</span></span><br><span class=\"line\">    <span class=\"comment\">// 为了方便c1 = f1(middlewareAPI), c2 = f2(middlewareAPI), c3 = f3(middlewareAPI)</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里chain = [c1, c2 , c3]</span></span><br><span class=\"line\">    chain = middlewares.map(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class=\"line\">    <span class=\"comment\">// 这里comopse</span></span><br><span class=\"line\">    <span class=\"comment\">// dispatch = c1(c2(c3(store.dispatch)))</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么就是c3最先执行,以真实的store.dispatch传入,作为next</span></span><br><span class=\"line\">    <span class=\"comment\">// next =&gt; action =&gt; &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以返回的是一个action =&gt; &#123;&#125;, 这其实是一个新的dispatch</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么c2接受的next就是c3返回的新的dispatch</span></span><br><span class=\"line\">    <span class=\"comment\">// 以此类推,c1最后会返回它自己生成的一个dispatch</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以最后得到的就是一个dispatch</span></span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 最后真正执行dispatch(action)的时候,还是c1的next,c2的next,c3的next这样的顺序执行的,最终执行真正的store.dispatch:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}